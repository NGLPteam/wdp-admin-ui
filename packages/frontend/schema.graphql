schema {
  query: Query
  mutation: Mutation
}

"""An access control list"""
type AccessControlList {
  permissions: [PermissionGrant!]!
}

"""
An access grant is a combination of an Entity, a Role, and a Subject. It determines permissions for
said subject at the specific point in the hierarchy, and any child entities will inherit that role
as its accessControlList defines.

"""
interface AccessGrant {
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  """The role the subject has been assigned"""
  role: Role!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
}

"""Filters a set of access grants by what type of entity they've granted access to"""
enum AccessGrantEntityFilter {
  """All entity types"""
  ALL
  """Communities only"""
  COMMUNITY
  """Collections only"""
  COLLECTION
  """Items only"""
  ITEM
}

"""
An access grant subject is a person or group to which access for a specific entity
(and all its children) has been granted.

"""
interface AccessGrantSubject {
  """A polymorphic connection for access grants from a subject"""
  allAccessGrants(
    entity: AccessGrantEntityFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
}

"""Filters a set of access grants by what type of subject they've granted access to"""
enum AccessGrantSubjectFilter {
  """All subject types"""
  ALL
  """An individual user"""
  USER
  """A group of users. Not currently exposed"""
  GROUP
}

"""An accessible entity can be granted access directly"""
interface Accessible {
  """A polymorphic connection for access grants from an entity"""
  allAccessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
}

"""Autogenerated input type of AlterSchemaVersion"""
input AlterSchemaVersionInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """The slug for the new schema to apply"""
  schemaVersionSlug: String!
  """
  An arbitrary set of property values. Owing to the dynamic nature, they do not have a specific GraphQL input type
  associated with them. Validation will be performed within the application and returned as errors if not valid.
  
  """
  propertyValues: JSON!
  """
  This argument dictates how the mutation should handle received property values.
  If set to `SKIP`, it will alter the schema version without setting any new properties.
  
  """
  strategy: PropertyApplicationStrategy = APPLY
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AlterSchemaVersion"""
type AlterSchemaVersionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  community: Community
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  item: Item
  schemaErrors: [SchemaValueError!]!
}

"""
Encompasses *all* possible access grant types

"""
union AnyAccessGrant = UserCollectionAccessGrant | UserCommunityAccessGrant | UserGroupCollectionAccessGrant | UserGroupCommunityAccessGrant | UserGroupItemAccessGrant | UserItemAccessGrant

"""The connection type for AnyAccessGrant."""
type AnyAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [AnyAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [AnyAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyAccessGrant!
}

union AnyAsset = AssetAudio | AssetDocument | AssetImage | AssetPDF | AssetUnknown | AssetVideo

"""The connection type for AnyAsset."""
type AnyAssetConnection implements Paginated {
  """A list of edges."""
  edges: [AnyAssetEdge!]!
  """A list of nodes."""
  nodes: [AnyAsset!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyAssetEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyAsset!
}

"""Something that can be attached to"""
union AnyAttachable = Collection | Community | Item

"""Any entity that can have a parent."""
union AnyChildEntity = Collection | Item

union AnyCollectionAccessGrant = UserCollectionAccessGrant | UserGroupCollectionAccessGrant

"""The connection type for AnyCollectionAccessGrant."""
type AnyCollectionAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [AnyCollectionAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [AnyCollectionAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyCollectionAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyCollectionAccessGrant!
}

union AnyCommunityAccessGrant = UserCommunityAccessGrant | UserGroupCommunityAccessGrant

"""The connection type for AnyCommunityAccessGrant."""
type AnyCommunityAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [AnyCommunityAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [AnyCommunityAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyCommunityAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyCommunityAccessGrant!
}

"""A union of possible contribution types"""
union AnyContribution = CollectionContribution | ItemContribution

union AnyContributor = OrganizationContributor | PersonContributor

"""The connection type for AnyContributor."""
type AnyContributorConnection implements Paginated {
  """A list of edges."""
  edges: [AnyContributorEdge!]!
  """A list of nodes."""
  nodes: [AnyContributor!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyContributorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyContributor!
}

"""A hierarchical entity type"""
union AnyEntity = Collection | Community | Item

"""Used by a LinkTargetCandidate, this describes any type of model that can act as a target for an EntityLink"""
union AnyLinkTarget = Collection | Item

"""The various types an OrderingEntry can refer to"""
union AnyOrderingEntry = Collection | Community | EntityLink | Item

"""
`AnyScalarProperty` represents a collection of known *scalar* properties. In effect,
it includes every possible schema property type except for groups (`GroupProperty`).

This union is intended to iterate the properties within a group. To iterate over the
properties in a `SchemaInstance`, you should use `AnySchemaPropertyType` to ensure that
you are also seeing groups.

Any object contained within this union is guaranteed to implement `ScalarProperty`
as well as `SchemaProperty`.

"""
union AnyScalarProperty = AssetProperty | AssetsProperty | BooleanProperty | ContributorProperty | ContributorsProperty | DateProperty | EmailProperty | FloatProperty | FullTextProperty | IntegerProperty | MarkdownProperty | MultiselectProperty | SelectProperty | StringProperty | TagsProperty | TimestampProperty | URLProperty | UnknownProperty | VariableDateProperty

"""
`AnySchemaProperty` represents the top level of a schema instance's properties. It can include any scalar property, as
well as any `GroupProperty` that the instance might have. To query only scalar properties, see `AnyScalarProperty`.

All properties contained in this union are guaranteed to implement `SchemaProperty`.

"""
union AnySchemaProperty = AssetProperty | AssetsProperty | BooleanProperty | ContributorProperty | ContributorsProperty | DateProperty | EmailProperty | FloatProperty | FullTextProperty | GroupProperty | IntegerProperty | MarkdownProperty | MultiselectProperty | SelectProperty | StringProperty | TagsProperty | TimestampProperty | URLProperty | UnknownProperty | VariableDateProperty

"""
Encompasses any access grant for a specific user.

"""
union AnyUserAccessGrant = UserCollectionAccessGrant | UserCommunityAccessGrant | UserItemAccessGrant

"""The connection type for AnyUserAccessGrant."""
type AnyUserAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [AnyUserAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [AnyUserAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyUserAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyUserAccessGrant!
}

"""
Encompasses any access grant for a group of users. Not currently exposed.

"""
union AnyUserGroupAccessGrant = UserGroupCollectionAccessGrant | UserGroupCommunityAccessGrant | UserGroupItemAccessGrant

"""The connection type for AnyUserGroupAccessGrant."""
type AnyUserGroupAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [AnyUserGroupAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [AnyUserGroupAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyUserGroupAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyUserGroupAccessGrant!
}

"""Autogenerated input type of ApplySchemaProperties"""
input ApplySchemaPropertiesInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """
  An arbitrary set of property values. Owing to the dynamic nature, they do not have a specific GraphQL input type
  associated with them. Validation will be performed within the application and returned as errors if not valid.
  
  """
  propertyValues: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ApplySchemaProperties"""
type ApplySchemaPropertiesPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  community: Community
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  item: Item
  schemaErrors: [SchemaValueError!]!
}

"""A generic asset type, implemented by all the more specific kinds"""
interface Asset {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
}

type AssetAudio implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetDocument implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetImage implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The supported kinds of assets in the system"""
enum AssetKind {
  image
  video
  audio
  pdf
  document
  unknown
}

"""The type(s) of assets to retrieve"""
enum AssetKindFilter {
  ALL
  """An image, video, or audio file"""
  MEDIA
  AUDIO
  IMAGE
  VIDEO
  PDF
  DOCUMENT
  UNKNOWN
}

type AssetPDF implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  asset: AnyAsset
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""A select option for a single asset"""
type AssetSelectOption {
  kind: AssetKind!
  label: String!
  value: String!
}

type AssetUnknown implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetVideo implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: ImageAttachment!
  """Configurable metadata for the preview attachment"""
  previewMetadata: ImageMetadata
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetsProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  assets: [AnyAsset!]!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""A model that has attached assets"""
interface Attachable {
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAssetConnection!
}

"""This describes where a given file attachment is stored (if at all)"""
enum AttachmentStorage {
  """STORE refers to permanent storage. An asset here has been fully processed and is ready for access"""
  STORE
  """
  CACHE refers to temporary storage. When a file is first uploaded to the system, it lives in cache and needs to be processed.
  A user could potentially fetch something from an API while a file is still being processed in the background, and if so, none
  of its derivatives will be present yet.
  
  """
  CACHE
  """Not yet used"""
  DERIVATIVES
  """
  Remote URL storage. Only used internally at present, but may sometimes appear during certain harvesting events.
  
  """
  REMOTE
}

type BooleanProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  checked: Boolean
  checkedByDefault: Boolean
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""
An interface for entities that can contain actual content, as well as any number of themselves
in a tree structure.

In practice, this means a `Collection` or an `Item`, not a `Community`.

"""
interface ChildEntity {
  """The date this entity was added to its parent"""
  accessioned: VariablePrecisionDate!
  """
  Directly fetch a defined named ancestor by its name. It can be null,
  either because an invalid name was provided, the schema hierarchy is
  incomplete, or the association itself is optional.
  
  """
  ancestorByName(
    """The name of the ancestor to fetch"""
    name: String!
  ): AnyEntity
  """
  Look up an ancestor for this entity that implements a specific type. It ascends from this entity,
  so it will first check the parent, then the grandparent, and so on.
  
  """
  ancestorOfType(
    """A fully-qualified name of a schema to look for."""
    schema: String!
  ): AnyEntity
  """The date this entity was made available"""
  available: VariablePrecisionDate!
  """The date this entity was added to the WDP"""
  createdAt: ISO8601DateTime!
  """
  Whether the entity is _currently_ hidden, based on the server's time zone.
  
  """
  currentlyHidden: Boolean!
  """
  Whether the entity is _currently_ visible, based on the server's time zone.
  
  """
  currentlyVisible: Boolean!
  """
  The Digital Object Identifier for this entity. See https://doi.org
  
  """
  doi: String
  """
  Whether the entity's visibility is set to `HIDDEN`
  
  """
  hidden: Boolean!
  """
  Specify a time to check to see if the entity will be hidden.
  
  """
  hiddenAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  """
  The International Standard Serial Number for this entity. See https://issn.org
  
  """
  issn: String
  """The date this entity was issued"""
  issued: VariablePrecisionDate!
  leaf: Boolean!
  """
  Fetch a list of named ancestors for this entity. This list is deterministically sorted
  to retrieve the "closest" ancestors first, ascending upwards in the hierarchy from there.
  
  **Note**: Like breadcrumbs, this association is intentionally not paginated for ease of use,
  because in practice a schema should not have many associations.
  
  """
  namedAncestors: [NamedAncestor!]!
  """The date this entity was published"""
  published: VariablePrecisionDate!
  root: Boolean!
  """A description of the contents of the entity"""
  summary: String
  """The date this entity was last updated within the WDP"""
  updatedAt: ISO8601DateTime!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  """
  Whether the entity's visibility is set to `VISIBLE`.
  
  """
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """
  Specify a time to check to see if the entity will be visible.
  
  """
  visibleAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""A collection of items"""
type Collection implements Accessible & Entity & HasDefaultTimestamps & ReferencesEntityVisibility & ReferencesGlobalEntityDates & ChildEntity & HasDOI & HasISSN & Contributable & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  accessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyCollectionAccessGrantConnection!
  """The date this entity was added to its parent"""
  accessioned: VariablePrecisionDate!
  """A polymorphic connection for access grants from an entity"""
  allAccessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """
  Directly fetch a defined named ancestor by its name. It can be null,
  either because an invalid name was provided, the schema hierarchy is
  incomplete, or the association itself is optional.
  
  """
  ancestorByName(
    """The name of the ancestor to fetch"""
    name: String!
  ): AnyEntity
  """
  Look up an ancestor for this entity that implements a specific type. It ascends from this entity,
  so it will first check the parent, then the grandparent, and so on.
  
  """
  ancestorOfType(
    """A fully-qualified name of a schema to look for."""
    schema: String!
  ): AnyEntity
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAssetConnection!
  """Retrieve a list of user & role assignments for this entity"""
  assignedUsers(
    order: ContextualPermissionOrder = USER_NAME_ASC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ContextualPermissionConnection!
  """The date this entity was made available"""
  available: VariablePrecisionDate!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): CollectionConnection! @deprecated(reason: "Use Collection.collections")
  """Retrieve the collections beneath this collection."""
  collections(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionConnection!
  community: Community!
  contributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionContributionConnection!
  """Contributors to this element"""
  contributors(
    order: ContributorOrder = NAME_ASCENDING
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyContributorConnection!
  """The date this entity was added to the WDP"""
  createdAt: ISO8601DateTime!
  """
  Whether the entity is _currently_ hidden, based on the server's time zone.
  
  """
  currentlyHidden: Boolean!
  """
  Whether the entity is _currently_ visible, based on the server's time zone.
  
  """
  currentlyVisible: Boolean!
  """
  The Digital Object Identifier for this entity. See https://doi.org
  
  """
  doi: String
  """Retrieve the first matching collection beneath this collection."""
  firstCollection(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
  ): Collection
  """Retrieve the first matching item beneath this item."""
  firstItem(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
  ): Item
  """Whether this collection has any child collections"""
  hasCollections: Boolean!
  """Whether this collection has any child items"""
  hasItems: Boolean!
  """A hero image for the entity, suitable for displaying in page headers"""
  heroImage: ImageAttachment!
  """Configurable metadata for the hero_image attachment"""
  heroImageMetadata: ImageMetadata
  """
  Whether the entity's visibility is set to `HIDDEN`
  
  """
  hidden: Boolean!
  """
  Specify a time to check to see if the entity will be hidden.
  
  """
  hiddenAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  """
  The International Standard Serial Number for this entity. See https://issn.org
  
  """
  issn: String
  """The date this entity was issued"""
  issued: VariablePrecisionDate!
  items(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemConnection!
  leaf: Boolean!
  """Available link targets for this entity"""
  linkTargetCandidates(
    kind: LinkTargetCandidateFilter = ALL
    title: String = ""
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): LinkTargetCandidateConnection!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): EntityLinkConnection!
  """
  Fetch a list of named ancestors for this entity. This list is deterministically sorted
  to retrieve the "closest" ancestors first, ascending upwards in the hierarchy from there.
  
  **Note**: Like breadcrumbs, this association is intentionally not paginated for ease of use,
  because in practice a schema should not have many associations.
  
  """
  namedAncestors: [NamedAncestor!]!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: OrderingOrder = DETERMINISTIC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): OrderingConnection!
  """Look up a page for this entity by slug"""
  page(slug: String!): Page
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): PageConnection!
  parent: CollectionParent
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  """The date this entity was published"""
  published: VariablePrecisionDate!
  """Retrieve linked collections of the same schema type"""
  relatedCollections(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionConnection!
  root: Boolean!
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  """
  Read a single schema property by its full path.
  
  """
  schemaProperty(
    """The full path to the schema property. Please note, paths are snake_case, not camelCase."""
    fullPath: String!
  ): AnySchemaProperty
  schemaRanks: [HierarchicalSchemaRank!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A human-readable subtitle for the entity"""
  subtitle: String
  """A description of the contents of the entity"""
  summary: String
  """A representative thumbnail for the entity, suitable for displaying in lists, tables, grids, etc."""
  thumbnail: ImageAttachment!
  """Configurable metadata for the thumbnail attachment"""
  thumbnailMetadata: ImageMetadata
  """A human-readable title for the entity"""
  title: String!
  """The date this entity was last updated within the WDP"""
  updatedAt: ISO8601DateTime!
  """Access grants for specific users"""
  userAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserCollectionAccessGrantConnection!
  """Not presently used"""
  userGroupAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupCollectionAccessGrantConnection!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  """
  Whether the entity's visibility is set to `VISIBLE`.
  
  """
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """
  Specify a time to check to see if the entity will be visible.
  
  """
  visibleAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""The connection type for Collection."""
type CollectionConnection implements Paginated {
  """A list of edges."""
  edges: [CollectionEdge!]!
  """A list of nodes."""
  nodes: [Collection!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A contribution to a collection"""
type CollectionContribution implements Contribution & Node & Sluggable {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  collection: Collection!
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  createdAt: ISO8601DateTime!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  id: ID!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  slug: Slug!
  """A potentially-overridden value from person contributors"""
  title: String
  updatedAt: ISO8601DateTime!
}

"""The connection type for CollectionContribution."""
type CollectionContributionConnection implements Paginated {
  """A list of edges."""
  edges: [CollectionContributionEdge!]!
  """A list of nodes."""
  nodes: [CollectionContribution!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CollectionContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: CollectionContribution!
}

"""An edge in a connection."""
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Collection!
}

union CollectionParent = Collection | Community

"""A community of users"""
type Community implements Accessible & Entity & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  accessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyCommunityAccessGrantConnection!
  """A polymorphic connection for access grants from an entity"""
  allAccessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAssetConnection!
  """Retrieve a list of user & role assignments for this entity"""
  assignedUsers(
    order: ContextualPermissionOrder = USER_NAME_ASC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ContextualPermissionConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  collections(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionConnection!
  createdAt: ISO8601DateTime!
  """Retrieve the first matching collection beneath this collection."""
  firstCollection(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
  ): Collection
  """Retrieve the first matching item beneath this item."""
  firstItem(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
  ): Item
  """A hero image for the entity, suitable for displaying in page headers"""
  heroImage: ImageAttachment!
  """Configurable metadata for the hero_image attachment"""
  heroImageMetadata: ImageMetadata
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  """Available link targets for this entity"""
  linkTargetCandidates(
    kind: LinkTargetCandidateFilter = ALL
    title: String = ""
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): LinkTargetCandidateConnection!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): EntityLinkConnection!
  metadata: JSON
  name: String! @deprecated(reason: "Use Community.title")
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: OrderingOrder = DETERMINISTIC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): OrderingConnection!
  """Look up a page for this entity by slug"""
  page(slug: String!): Page
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): PageConnection!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  position: Int
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  """
  Read a single schema property by its full path.
  
  """
  schemaProperty(
    """The full path to the schema property. Please note, paths are snake_case, not camelCase."""
    fullPath: String!
  ): AnySchemaProperty
  schemaRanks: [HierarchicalSchemaRank!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A human-readable subtitle for the entity"""
  subtitle: String
  """A representative thumbnail for the entity, suitable for displaying in lists, tables, grids, etc."""
  thumbnail: ImageAttachment!
  """Configurable metadata for the thumbnail attachment"""
  thumbnailMetadata: ImageMetadata
  """A human-readable title for the entity"""
  title: String!
  updatedAt: ISO8601DateTime!
  """Access grants for specific users"""
  userAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserCommunityAccessGrantConnection!
  """Not presently used"""
  userGroupAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupCommunityAccessGrantConnection!
}

"""The connection type for Community."""
type CommunityConnection implements Paginated {
  """A list of edges."""
  edges: [CommunityEdge!]!
  """A list of nodes."""
  nodes: [Community!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CommunityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Community!
}

"""A contextual permission for a user, role, and entity"""
type ContextualPermission implements ExposesPermissions & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  """The access grants that correspond to this contextual permission"""
  accessGrants: [AnyUserAccessGrant!]!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  createdAt: ISO8601DateTime!
  id: ID!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  """The roles that correspond to this contextual permission"""
  roles: [Role!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""The connection type for ContextualPermission."""
type ContextualPermissionConnection implements Paginated {
  """A list of edges."""
  edges: [ContextualPermissionEdge!]!
  """A list of nodes."""
  nodes: [ContextualPermission!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ContextualPermissionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ContextualPermission!
}

"""A collection of options used to dictate how to order contextual permissions"""
enum ContextualPermissionOrder {
  """Order by the most recently granted permissions"""
  RECENT
  """Order by the oldest granted permissions"""
  OLDEST
  """Order by the user's name from A-Z"""
  USER_NAME_ASC
  """Order by the user's name from Z-A"""
  USER_NAME_DESC
}

"""Something that can be contributed to"""
interface Contributable {
  """Contributors to this element"""
  contributors(
    order: ContributorOrder = NAME_ASCENDING
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyContributorConnection!
}

"""A contribution from a certain contributor"""
interface Contribution {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  """A potentially-overridden value from person contributors"""
  title: String
}

"""Metadata for a contribution"""
type ContributionMetadata {
  """A value that can override a contribution's contributor's affiliation"""
  affiliation: String
  """A value that can oerride a contribution's contributor's displayed name"""
  displayName: String
  """An arbitrary field describing how the contributor contributed"""
  role: String
  """A value that can override a contribution's contributor's title"""
  title: String
}

"""An input type that builds contribution metadata"""
input ContributionMetadataInput {
  """A value that can override a contribution's contributor's title"""
  title: String
  """A value that can override a contribution's contributor's affiliation"""
  affiliation: String
  """A value that can override a contribution's contributor's displayed name"""
  displayName: String
  """A value that can override a contribution's contributor's location"""
  location: String
}

"""Sort contributions by various properties and directions"""
enum ContributionOrder {
  """Sort contributors by newest created date"""
  RECENT
  """Sort contributors by oldest created date"""
  OLDEST
  """Sort contributors by their target's title A-Z"""
  TARGET_TITLE_ASCENDING
  """Sort contributors by their target's title Z-A"""
  TARGET_TITLE_DESCENDING
}

"""A contributor who has made a contribution"""
interface Contributor {
  bio: String
  """The total number of collection contributions from this contributor"""
  collectionContributionCount: Int!
  collectionContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionContributionConnection!
  """The total number of contributions (item + collection) from this contributor"""
  contributionCount: Int!
  email: String
  identifier: String!
  """An optional image associated with the contributor."""
  image: ImageAttachment!
  """Configurable metadata for the image attachment"""
  imageMetadata: ImageMetadata
  """The total number of item contributions from this contributor"""
  itemContributionCount: Int!
  itemContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemContributionConnection!
  kind: ContributorKind!
  links: [ContributorLink!]!
  """A display name, independent of the type of contributor"""
  name: String!
  prefix: String
  suffix: String
  url: String
}

enum ContributorFilterKind {
  ALL
  ORGANIZATION
  PERSON
}

enum ContributorKind {
  organization
  person
}

"""A link for a contributor"""
type ContributorLink {
  title: String!
  url: String!
}

"""A mapping to build a contributor link"""
input ContributorLinkInput {
  title: String!
  url: String!
}

"""Sort contributors by various properties and directions"""
enum ContributorOrder {
  """Sort contributors by newest created date"""
  RECENT
  """Sort contributors by oldest created date"""
  OLDEST
  """Sort contributors by most contributions, then fall back to name A-Z"""
  MOST_CONTRIBUTIONS
  """Sort contributors by least contributions, then fall back to name A-Z"""
  LEAST_CONTRIBUTIONS
  """Sort contributors by name A-Z. For people, this currently uses western naming order (family name, given name)."""
  NAME_ASCENDING
  """Sort contributors by name Z-A. For people, this currently uses western naming order (family name, given name)."""
  NAME_DESCENDING
  """Sort contributors by affiliation A-Z, then fall back to name A-Z"""
  AFFILIATION_ASCENDING
  """Sort contributors by affiliation Z-A, then fall back to name A-Z"""
  AFFILIATION_DESCENDING
}

type ContributorProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  contributor: AnyContributor
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""A select option for a single contributor"""
type ContributorSelectOption {
  kind: ContributorKind!
  label: String!
  value: String!
}

type ContributorsProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  contributors: [AnyContributor!]!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""Autogenerated input type of CreateAsset"""
input CreateAssetInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """
  A reference to an upload in Tus.
  
  """
  attachment: UploadedFileInput!
  """A human readable name for the asset"""
  name: String!
  """The position the asset occupies amongst siblings"""
  position: Int
  """Alt text to display for the asset (if applicable)"""
  altText: String
  """A caption to display below the asset (if applicable)"""
  caption: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateAsset"""
type CreateAssetPayload implements StandardMutationPayload {
  asset: AnyAsset
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateCollection"""
input CreateCollectionInput {
  """
  The parent of the new collection. This can be the encoded ID of a community or another collection.
  
  """
  parentId: ID!
  schemaVersionSlug: String = "default:collection:latest"
  """Human-readable title for the entity"""
  title: String!
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """A brief description of the entity's contents."""
  summary: String
  """The date the entity was published"""
  published: VariablePrecisionDateInput
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """Digital Object Identifier (see: https://doi.org)"""
  doi: String
  """International Standard Serial Number (see: https://issn.org)"""
  issn: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCollection"""
type CreateCollectionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateCommunity"""
input CreateCommunityInput {
  """Human-readable title for the entity"""
  title: String!
  """The position the community occupies in the list"""
  position: Int
  schemaVersionSlug: String = "default:community:latest"
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCommunity"""
type CreateCommunityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A representation of a successfully created community"""
  community: Community
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateItem"""
input CreateItemInput {
  """
  The parent of the item. This can be the encoded ID of a collection or another item.
  
  """
  parentId: ID!
  schemaVersionSlug: String = "default:item:latest"
  """Human-readable title for the entity"""
  title: String!
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """A brief description of the entity's contents."""
  summary: String
  """The date the entity was published"""
  published: VariablePrecisionDateInput
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """Digital Object Identifier (see: https://doi.org)"""
  doi: String
  """International Standard Serial Number (see: https://issn.org)"""
  issn: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateItem"""
type CreateItemPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """A representation of a successfully created item"""
  item: Item
}

"""Autogenerated input type of CreateOrdering"""
input CreateOrderingInput {
  """
  The entity to create the ordering for.
  
  """
  entityId: ID!
  """A unique (within the context of the entity) identifier. Cannot be changed"""
  identifier: String!
  """A human readable label for the ordering"""
  name: String
  """Optional markdown content to display before the ordering's children"""
  header: String
  """Optional markdown content to display after the ordering's children"""
  footer: String
  filter: OrderingFilterDefinitionInput
  select: OrderingSelectDefinitionInput
  order: [OrderDefinitionInput!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrdering"""
type CreateOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The created ordering"""
  ordering: Ordering
}

"""Autogenerated input type of CreateOrganizationContributor"""
input CreateOrganizationContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an uploaded image in Tus.
  
  """
  image: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  imageMetadata: ImageMetadataInput
  """The legal name of the organization"""
  legalName: String
  """Where the organization is located (if applicable)"""
  location: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrganizationContributor"""
type CreateOrganizationContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created organization"""
  contributor: OrganizationContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreatePage"""
input CreatePageInput {
  entityId: ID!
  title: String!
  slug: String!
  position: Int
  body: String!
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePage"""
type CreatePagePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  page: Page
}

"""Autogenerated input type of CreatePersonContributor"""
input CreatePersonContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an uploaded image in Tus.
  
  """
  image: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  imageMetadata: ImageMetadataInput
  givenName: String
  familyName: String
  title: String
  affiliation: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePersonContributor"""
type CreatePersonContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created person"""
  contributor: PersonContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateRole"""
input CreateRoleInput {
  name: String!
  accessControlList: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRole"""
type CreateRolePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  role: Role
}

"""This describes the level of precision a VariablePrecisionDate has, in increasing order of specificity."""
enum DatePrecision {
  NONE
  YEAR
  MONTH
  DAY
}

type DateProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  date: ISO8601Date
  default: ISO8601Date
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""
The most basic shared properties for a single schema, whether a definition,
a version, or an aggregate based on the former types.

"""
interface DescribesSchema {
  """A unique (per-namespace) value that names the schema within the system."""
  identifier: String!
  """The kind of entity this schema applies to"""
  kind: SchemaKind!
  """A human-readable name for the schema"""
  name: String!
  """A unique namespace the schema lives in"""
  namespace: String!
}

"""Autogenerated input type of DestroyAsset"""
input DestroyAssetInput {
  """The ID for the asset to destroy"""
  assetId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyAsset"""
type DestroyAssetPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyCollection"""
input DestroyCollectionInput {
  """The ID for the collection to destroy"""
  collectionId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyCollection"""
type DestroyCollectionPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyCommunity"""
input DestroyCommunityInput {
  """The ID for the community to destroy"""
  communityId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyCommunity"""
type DestroyCommunityPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyContribution"""
input DestroyContributionInput {
  contributionId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyContribution"""
type DestroyContributionPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyContributor"""
input DestroyContributorInput {
  contributorId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyContributor"""
type DestroyContributorPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyEntityLink"""
input DestroyEntityLinkInput {
  """The ID for the EntityLink to destroy"""
  entityLinkId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyEntityLink"""
type DestroyEntityLinkPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyItem"""
input DestroyItemInput {
  """The ID for the item to destroy"""
  itemId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyItem"""
type DestroyItemPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""This mutation destroys a model"""
interface DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyOrdering"""
input DestroyOrderingInput {
  orderingId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyOrdering"""
type DestroyOrderingPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  disabled: Boolean
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyPage"""
input DestroyPageInput {
  pageId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyPage"""
type DestroyPagePayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

enum Direction {
  ASCENDING
  DESCENDING
}

type EmailProperty implements SchemaProperty & ScalarProperty {
  address: String
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  defaultAddress: String
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""An entity that exists in the hierarchy."""
interface Entity {
  """Derived access control list"""
  accessControlList: AccessControlList
  """A polymorphic connection for access grants from an entity"""
  allAccessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Retrieve a list of user & role assignments for this entity"""
  assignedUsers(
    order: ContextualPermissionOrder = USER_NAME_ASC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ContextualPermissionConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  """A hero image for the entity, suitable for displaying in page headers"""
  heroImage: ImageAttachment!
  """Configurable metadata for the hero_image attachment"""
  heroImageMetadata: ImageMetadata
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  """Available link targets for this entity"""
  linkTargetCandidates(
    kind: LinkTargetCandidateFilter = ALL
    title: String = ""
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): LinkTargetCandidateConnection!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): EntityLinkConnection!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: OrderingOrder = DETERMINISTIC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): OrderingConnection!
  """Look up a page for this entity by slug"""
  page(slug: String!): Page
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): PageConnection!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  schemaDefinition: SchemaDefinition!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  schemaRanks: [HierarchicalSchemaRank!]!
  schemaVersion: SchemaVersion!
  """A human-readable subtitle for the entity"""
  subtitle: String
  """A representative thumbnail for the entity, suitable for displaying in lists, tables, grids, etc."""
  thumbnail: ImageAttachment!
  """Configurable metadata for the thumbnail attachment"""
  thumbnailMetadata: ImageMetadata
  """A human-readable title for the entity"""
  title: String!
}

type EntityBreadcrumb implements Node {
  crumb: AnyEntity!
  depth: Int!
  id: ID!
  kind: EntityKind!
  label: String!
  slug: String!
}

"""An enumeration of the different kinds of hierarchical entities"""
enum EntityKind {
  COMMUNITY
  COLLECTION
  ITEM
}

"""A link between different entities"""
type EntityLink implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  operator: EntityLinkOperator!
  scope: EntityLinkScope!
  slug: Slug!
  source: AnyEntity!
  sourceCollection: Collection
  sourceCommunity: Community
  sourceItem: Item
  target: AnyEntity!
  targetCollection: Collection
  targetCommunity: Community
  targetItem: Item
  updatedAt: ISO8601DateTime!
}

"""The connection type for EntityLink."""
type EntityLinkConnection implements Paginated {
  """A list of edges."""
  edges: [EntityLinkEdge!]!
  """A list of nodes."""
  nodes: [EntityLink!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EntityLinkEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: EntityLink!
}

"""A link operator describes how a source is linked to its target"""
enum EntityLinkOperator {
  CONTAINS
  REFERENCES
}

"""A link scope succinctly describes the source and target types"""
enum EntityLinkScope {
  """A link to a community from another community"""
  COMMUNITY_LINKED_COMMUNITY
  """A link to a collection not directly owned by a community"""
  COMMUNITY_LINKED_COLLECTION
  """A link to an item from a community"""
  COMMUNITY_LINKED_ITEM
  """A link to a community from a collection"""
  COLLECTION_LINKED_COMMUNITY
  """A link to a collection from another collection"""
  COLLECTION_LINKED_COLLECTION
  """A link to an item from a community"""
  COLLECTION_LINKED_ITEM
  """A link to a community from an item"""
  ITEM_LINKED_COMMUNITY
  """A link to a collection from an item"""
  ITEM_LINKED_COLLECTION
  """A link to an item from another item"""
  ITEM_LINKED_ITEM
}

"""Sort entities by a specific property and order"""
enum EntityOrder {
  """Sort entities by newest created date"""
  RECENT
  """Sort entities by oldest created date"""
  OLDEST
  """Sort entities by oldest published date (or OLDEST for communities)"""
  PUBLISHED_ASCENDING
  """Sort entities by newest published date (or RECENT for communities)"""
  PUBLISHED_DESCENDING
  """Sort entities by title A-Z"""
  TITLE_ASCENDING
  """Sort entities by title Z-A"""
  TITLE_DESCENDING
  """Sort entities by the name of their schema A-Z"""
  SCHEMA_NAME_ASCENDING
  """Sort entities by the name of their schema Z-A"""
  SCHEMA_NAME_DESCENDING
}

enum EntityPermissionFilter {
  READ_ONLY
  CRUD
}

"""The level of visibility an entity can have"""
enum EntityVisibility {
  VISIBLE
  HIDDEN
  LIMITED
}

interface ExposesPermissions {
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
}

type FloatProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  defaultFloat: Float
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  floatValue: Float
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""A full-text searchable value for an entity"""
type FullText {
  """The full-text searchable value itself"""
  content: String
  """The content type for the text, if any"""
  kind: FullTextKind
  """The ISO-639 language code of this content, if any"""
  lang: String
}

"""It is necessary for the system to know what kind the content is in order to properly index it"""
enum FullTextKind {
  HTML
  MARKDOWN
  TEXT
}

type FullTextProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  fullText: FullText
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""The global configuration for this installation of WDP."""
type GlobalConfiguration implements Node {
  id: ID!
  """Settings specific to this site"""
  site: SiteSettings!
  """Settings specific to the site's theme"""
  theme: ThemeSettings!
}

"""Autogenerated input type of GrantAccess"""
input GrantAccessInput {
  entityId: ID!
  roleId: ID!
  userId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of GrantAccess"""
type GrantAccessPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Whether or not access was granted"""
  granted: Boolean
  """Not presently used"""
  haltCode: String
}

type GroupProperty implements SchemaProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  legend: String
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  properties: [AnyScalarProperty!]!
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""Something which implements a #storage key that identifies where its attachment currently lives."""
interface HasAttachmentStorage {
  """
  This field describes how an attachment is stored in the system. If it is nil, there is no associated attachment for this field.
  Otherwise, see the documentation for AttachmentStorage to see what the individual fields mean.
  
  """
  storage: AttachmentStorage
}

"""An entity that has a DOI"""
interface HasDOI {
  """
  The Digital Object Identifier for this entity. See https://doi.org
  
  """
  doi: String
}

"""
Automatically-set timestamps present on most real models in the system.

"""
interface HasDefaultTimestamps {
  """The date this entity was added to the WDP"""
  createdAt: ISO8601DateTime!
  """The date this entity was last updated within the WDP"""
  updatedAt: ISO8601DateTime!
}

"""An entity that has an ISSN"""
interface HasISSN {
  """
  The International Standard Serial Number for this entity. See https://issn.org
  
  """
  issn: String
}

interface HasSchemaProperties {
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
}

"""
A ranking of a schema from a certain point in the hierarchy. This can be used to generate
navigation or calculate statistics about what various entities contain.

"""
type HierarchicalSchemaRank implements Node & DescribesSchema {
  """The number of entities that implement this schema from this point in the hierarchy."""
  count: Int!
  """A count of distinct versions of this specific schema type from this point of the hierarchy."""
  distinctVersionCount: Int!
  id: ID!
  """A unique (per-namespace) value that names the schema within the system."""
  identifier: String!
  """The kind of entity this schema applies to"""
  kind: SchemaKind!
  """A human-readable name for the schema"""
  name: String!
  """A unique namespace the schema lives in"""
  namespace: String!
  """The rank of this schema at this point in the hierarchy, based on the statistical mode of its depth relative to the parent."""
  rank: Int!
  """A reference to the discrete schema definition"""
  schemaDefinition: SchemaDefinition!
  """A fully-qualified unique value that can be used to refer to this schema within the system"""
  slug: String!
  """A reference to the schema versions from this ranking"""
  versionRanks: [HierarchicalSchemaVersionRank!]!
}

"""
A ranking of a schema version from a certain point in the hierarchy. This can be used to generate
navigation or calculate statistics about what versions of a schema various entities contain.

"""
type HierarchicalSchemaVersionRank implements Node & DescribesSchema {
  """The number of entities that implement this schema from this point in the hierarchy."""
  count: Int!
  id: ID!
  """A unique (per-namespace) value that names the schema within the system."""
  identifier: String!
  """The kind of entity this schema applies to"""
  kind: SchemaKind!
  """A human-readable name for the schema"""
  name: String!
  """A unique namespace the schema lives in"""
  namespace: String!
  """The rank of this schema at this point in the hierarchy, based on the statistical mode of its depth relative to the parent."""
  rank: Int!
  """A reference to the discrete schema definition"""
  schemaDefinition: SchemaDefinition!
  """A reference to the discrete schema version"""
  schemaVersion: SchemaVersion!
  """A fully-qualified unique value that can be used to refer to this schema within the system"""
  slug: String!
  """A semantic version associated with the schema"""
  versionNumber: String!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""An abstract image interface. It includes the minimum amount of data to render an image in the browser."""
interface Image {
  """Alt text for accessible images"""
  alt: String
  dimensions: [Int!] @deprecated(reason: "Use width and height directly.")
  """The height of the image, if present"""
  height: Int
  """
  This field describes how an attachment is stored in the system. If it is nil, there is no associated attachment for this field.
  Otherwise, see the documentation for AttachmentStorage to see what the individual fields mean.
  
  """
  storage: AttachmentStorage
  """The URL for the image, if present."""
  url: String
  """The width of the image, if present"""
  width: Int
}

"""An attached image with standardized derivatives."""
type ImageAttachment implements HasAttachmentStorage {
  """Alt text for accessible images"""
  alt: String
  """A large-sized mapping for derivative formats"""
  large: ImageSize!
  """A medium-sized mapping for derivative formats"""
  medium: ImageSize!
  """Configurable metadata for the image."""
  metadata: ImageMetadata
  """The original source for the image"""
  original: ImageOriginal!
  """A small-sized mapping for derivative formats"""
  small: ImageSize!
  """
  This field describes how an attachment is stored in the system. If it is nil, there is no associated attachment for this field.
  Otherwise, see the documentation for AttachmentStorage to see what the individual fields mean.
  
  """
  storage: AttachmentStorage
  """A thumb-sized mapping for derivative formats"""
  thumb: ImageSize!
}

"""A derivative of the image with a specific size and format."""
type ImageDerivative implements Image {
  """Alt text for accessible images"""
  alt: String
  dimensions: [Int!] @deprecated(reason: "Use width and height directly.")
  """The format of this derivative"""
  format: ImageDerivativeFormat!
  """The height of the image, if present"""
  height: Int
  """The maximum height this size can occupy"""
  maxHeight: Int!
  """The maximum width this size can occupy"""
  maxWidth: Int!
  """The size of this derivative"""
  size: ImageDerivativeSize!
  """
  This field describes how an attachment is stored in the system. If it is nil, there is no associated attachment for this field.
  Otherwise, see the documentation for AttachmentStorage to see what the individual fields mean.
  
  """
  storage: AttachmentStorage
  """The URL for the image, if present."""
  url: String
  """The width of the image, if present"""
  width: Int
}

"""The format of a specific image derivative."""
enum ImageDerivativeFormat {
  """
  A more efficiently compressed image supported by most browsers worldwide.
  
  """
  WEBP
  """
  A Portable Network Graphics-formatted file, for legacy support on most all browsers.
  
  """
  PNG
}

"""The size of a specific image derivative."""
enum ImageDerivativeSize {
  LARGE
  MEDIUM
  SMALL
  THUMB
}

"""Shared metadata for image attachments"""
type ImageMetadata {
  """Alt text for accessible images"""
  alt: String
}

"""Shared metadata for updating image attachments"""
input ImageMetadataInput {
  """Alt text for accessible images"""
  alt: String
}

"""
The original source for the image. While derivatives are processing, it could be useful
for a temporary preview in the admin section, or for troubleshooting.

As this is the raw image, it is not optimized for display in the frontend and is best
used only as a fallback.

"""
type ImageOriginal implements HasAttachmentStorage & Image {
  """Alt text for accessible images"""
  alt: String
  dimensions: [Int!] @deprecated(reason: "Use width and height directly.")
  """The height of the image, if present"""
  height: Int
  """
  This field describes how an attachment is stored in the system. If it is nil, there is no associated attachment for this field.
  Otherwise, see the documentation for AttachmentStorage to see what the individual fields mean.
  
  """
  storage: AttachmentStorage
  """The URL for the image, if present."""
  url: String
  """The width of the image, if present"""
  width: Int
}

"""
This describes a specific derivative style
for an attachment, e.g. small, medium, thumb.

It is further broken down into the various formats
the WDP generates, presently WEBP and PNG.

"""
type ImageSize {
  """Alt text for accessible images"""
  alt: String
  """The (maximum) height for this size."""
  height: Int!
  """A png-formatted image derivative for this particular size."""
  png: ImageDerivative!
  size: ImageDerivativeSize!
  """A webp-formatted image derivative for this particular size."""
  webp: ImageDerivative!
  """The (maximum) width for this size."""
  width: Int!
}

type IntegerProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  defaultInteger: Int
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  integerValue: Int
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""An item that belongs to a collection"""
type Item implements Accessible & Entity & HasDefaultTimestamps & ReferencesEntityVisibility & ReferencesGlobalEntityDates & ChildEntity & HasDOI & HasISSN & Contributable & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  accessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyCollectionAccessGrantConnection!
  """The date this entity was added to its parent"""
  accessioned: VariablePrecisionDate!
  """A polymorphic connection for access grants from an entity"""
  allAccessGrants(
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """
  Directly fetch a defined named ancestor by its name. It can be null,
  either because an invalid name was provided, the schema hierarchy is
  incomplete, or the association itself is optional.
  
  """
  ancestorByName(
    """The name of the ancestor to fetch"""
    name: String!
  ): AnyEntity
  """
  Look up an ancestor for this entity that implements a specific type. It ascends from this entity,
  so it will first check the parent, then the grandparent, and so on.
  
  """
  ancestorOfType(
    """A fully-qualified name of a schema to look for."""
    schema: String!
  ): AnyEntity
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAssetConnection!
  """Retrieve a list of user & role assignments for this entity"""
  assignedUsers(
    order: ContextualPermissionOrder = USER_NAME_ASC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ContextualPermissionConnection!
  """The date this entity was made available"""
  available: VariablePrecisionDate!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): ItemConnection! @deprecated(reason: "Use Item.items")
  collection: Collection!
  community: Community!
  contributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemContributionConnection!
  """Contributors to this element"""
  contributors(
    order: ContributorOrder = NAME_ASCENDING
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyContributorConnection!
  """The date this entity was added to the WDP"""
  createdAt: ISO8601DateTime!
  """
  Whether the entity is _currently_ hidden, based on the server's time zone.
  
  """
  currentlyHidden: Boolean!
  """
  Whether the entity is _currently_ visible, based on the server's time zone.
  
  """
  currentlyVisible: Boolean!
  """
  The Digital Object Identifier for this entity. See https://doi.org
  
  """
  doi: String
  """Retrieve the first matching item beneath this item."""
  firstItem(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
  ): Item
  """Whether this item has any child items"""
  hasItems: Boolean!
  """A hero image for the entity, suitable for displaying in page headers"""
  heroImage: ImageAttachment!
  """Configurable metadata for the hero_image attachment"""
  heroImageMetadata: ImageMetadata
  """
  Whether the entity's visibility is set to `HIDDEN`
  
  """
  hidden: Boolean!
  """
  Specify a time to check to see if the entity will be hidden.
  
  """
  hiddenAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  """
  The International Standard Serial Number for this entity. See https://issn.org
  
  """
  issn: String
  """The date this entity was issued"""
  issued: VariablePrecisionDate!
  """Retrieve the items beneath this item"""
  items(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Describe the depth of entities to retrieve"""
    nodeFilter: SubtreeNodeFilter = CHILDREN
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemConnection!
  leaf: Boolean!
  """Available link targets for this entity"""
  linkTargetCandidates(
    kind: LinkTargetCandidateFilter = ALL
    title: String = ""
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): LinkTargetCandidateConnection!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): EntityLinkConnection!
  """
  Fetch a list of named ancestors for this entity. This list is deterministically sorted
  to retrieve the "closest" ancestors first, ascending upwards in the hierarchy from there.
  
  **Note**: Like breadcrumbs, this association is intentionally not paginated for ease of use,
  because in practice a schema should not have many associations.
  
  """
  namedAncestors: [NamedAncestor!]!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: OrderingOrder = DETERMINISTIC
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): OrderingConnection!
  """Look up a page for this entity by slug"""
  page(slug: String!): Page
  pages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): PageConnection!
  parent: ItemParent
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  """The date this entity was published"""
  published: VariablePrecisionDate!
  """Retrieve linked items of the same schema type"""
  relatedItems(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemConnection!
  root: Boolean!
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  """
  Read a single schema property by its full path.
  
  """
  schemaProperty(
    """The full path to the schema property. Please note, paths are snake_case, not camelCase."""
    fullPath: String!
  ): AnySchemaProperty
  schemaRanks: [HierarchicalSchemaRank!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A human-readable subtitle for the entity"""
  subtitle: String
  """A description of the contents of the entity"""
  summary: String
  """A representative thumbnail for the entity, suitable for displaying in lists, tables, grids, etc."""
  thumbnail: ImageAttachment!
  """Configurable metadata for the thumbnail attachment"""
  thumbnailMetadata: ImageMetadata
  """A human-readable title for the entity"""
  title: String!
  """The date this entity was last updated within the WDP"""
  updatedAt: ISO8601DateTime!
  """Access grants for specific users"""
  userAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserCollectionAccessGrantConnection!
  """Not presently used"""
  userGroupAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupCollectionAccessGrantConnection!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  """
  Whether the entity's visibility is set to `VISIBLE`.
  
  """
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """
  Specify a time to check to see if the entity will be visible.
  
  """
  visibleAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""The connection type for Item."""
type ItemConnection implements Paginated {
  """A list of edges."""
  edges: [ItemEdge!]!
  """A list of nodes."""
  nodes: [Item!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A contribution to an item"""
type ItemContribution implements Contribution & Node & Sluggable {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  createdAt: ISO8601DateTime!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  id: ID!
  item: Item!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  slug: Slug!
  """A potentially-overridden value from person contributors"""
  title: String
  updatedAt: ISO8601DateTime!
}

"""The connection type for ItemContribution."""
type ItemContributionConnection implements Paginated {
  """A list of edges."""
  edges: [ItemContributionEdge!]!
  """A list of nodes."""
  nodes: [ItemContribution!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ItemContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ItemContribution!
}

"""An edge in a connection."""
type ItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Item!
}

union ItemParent = Collection | Item

"""Represents untyped JSON"""
scalar JSON

"""Autogenerated input type of LinkEntity"""
input LinkEntityInput {
  """The ID for the source entity"""
  sourceId: ID!
  """The ID for the target entity"""
  targetId: ID!
  """The 'type' of link"""
  operator: EntityLinkOperator!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LinkEntity"""
type LinkEntityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The created or updated link, if applicable"""
  link: EntityLink
}

"""A candidate for a link target, scoped to a parent source"""
type LinkTargetCandidate implements Node {
  createdAt: ISO8601DateTime!
  """How deeply nested the candidate entity is"""
  depth: Int!
  id: ID!
  kind: LinkTargetCandidateKind!
  """The actual target"""
  target: AnyLinkTarget!
  """The targetID to provide to linkEntity"""
  targetId: ID!
  """The target entity's title"""
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for LinkTargetCandidate."""
type LinkTargetCandidateConnection implements Paginated {
  """A list of edges."""
  edges: [LinkTargetCandidateEdge!]!
  """A list of nodes."""
  nodes: [LinkTargetCandidate!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LinkTargetCandidateEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: LinkTargetCandidate!
}

"""Filter the available candidates for a link target"""
enum LinkTargetCandidateFilter {
  """Show all possible link target candidate types"""
  ALL
  """Limit to collection candidates"""
  COLLECTION
  """Limit to item candidates"""
  ITEM
}

"""The kind of link target candidate"""
enum LinkTargetCandidateKind {
  COLLECTION
  ITEM
}

type MarkdownProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  content: String
  default: String
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

type MultiselectProperty implements SchemaProperty & ScalarProperty & OptionableProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  defaultSelections: [String!]
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  options: [SelectOption!]!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  selections: [String!]
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""
The entry point for making changes to the data within the WDP API.

"""
type Mutation {
  """Change a schema version for an entity."""
  alterSchemaVersion(
    """Parameters for AlterSchemaVersion"""
    input: AlterSchemaVersionInput!
  ): AlterSchemaVersionPayload
  applySchemaProperties(
    """Parameters for ApplySchemaProperties"""
    input: ApplySchemaPropertiesInput!
  ): ApplySchemaPropertiesPayload
  """
  Associate an uploaded asset (already present in the Tus cache store) with an entity.
  
  """
  createAsset(
    """Parameters for CreateAsset"""
    input: CreateAssetInput!
  ): CreateAssetPayload
  createCollection(
    """Parameters for CreateCollection"""
    input: CreateCollectionInput!
  ): CreateCollectionPayload
  """Create a community"""
  createCommunity(
    """Parameters for CreateCommunity"""
    input: CreateCommunityInput!
  ): CreateCommunityPayload
  """Create an item"""
  createItem(
    """Parameters for CreateItem"""
    input: CreateItemInput!
  ): CreateItemPayload
  """Create an ordering for an entity"""
  createOrdering(
    """Parameters for CreateOrdering"""
    input: CreateOrderingInput!
  ): CreateOrderingPayload
  """Create an organization contributor"""
  createOrganizationContributor(
    """Parameters for CreateOrganizationContributor"""
    input: CreateOrganizationContributorInput!
  ): CreateOrganizationContributorPayload
  """
  Create a page on an entity.
  
  """
  createPage(
    """Parameters for CreatePage"""
    input: CreatePageInput!
  ): CreatePagePayload
  """Create a contributor"""
  createPersonContributor(
    """Parameters for CreatePersonContributor"""
    input: CreatePersonContributorInput!
  ): CreatePersonContributorPayload
  """
  Create a global role, with a set of permissions, that can be used to grant access to various parts of the hierarchy
  in a granular fashion.
  
  """
  createRole(
    """Parameters for CreateRole"""
    input: CreateRoleInput!
  ): CreateRolePayload
  """
  Destroy an asset by ID.
  
  """
  destroyAsset(
    """Parameters for DestroyAsset"""
    input: DestroyAssetInput!
  ): DestroyAssetPayload
  """
  Destroy a collection by ID.
  
  """
  destroyCollection(
    """Parameters for DestroyCollection"""
    input: DestroyCollectionInput!
  ): DestroyCollectionPayload
  """
  Destroy a community by ID.
  
  """
  destroyCommunity(
    """Parameters for DestroyCommunity"""
    input: DestroyCommunityInput!
  ): DestroyCommunityPayload
  """
  Destroy a Contribution by ID.
  
  """
  destroyContribution(
    """Parameters for DestroyContribution"""
    input: DestroyContributionInput!
  ): DestroyContributionPayload
  """
  Destroy a contributor by ID.
  
  """
  destroyContributor(
    """Parameters for DestroyContributor"""
    input: DestroyContributorInput!
  ): DestroyContributorPayload
  """
  Destroy an EntityLink by ID.
  
  """
  destroyEntityLink(
    """Parameters for DestroyEntityLink"""
    input: DestroyEntityLinkInput!
  ): DestroyEntityLinkPayload
  """
  Destroy an item by ID.
  
  """
  destroyItem(
    """Parameters for DestroyItem"""
    input: DestroyItemInput!
  ): DestroyItemPayload
  """
  Destroy (or disable a schema-inherited) ordering.
  
  """
  destroyOrdering(
    """Parameters for DestroyOrdering"""
    input: DestroyOrderingInput!
  ): DestroyOrderingPayload
  """
  Destroy a page by ID.
  
  """
  destroyPage(
    """Parameters for DestroyPage"""
    input: DestroyPageInput!
  ): DestroyPagePayload
  """Grant access to a specific hierarchical entity"""
  grantAccess(
    """Parameters for GrantAccess"""
    input: GrantAccessInput!
  ): GrantAccessPayload
  """Link two entities together"""
  linkEntity(
    """Parameters for LinkEntity"""
    input: LinkEntityInput!
  ): LinkEntityPayload
  """
  A polymorphic mutation to reassign an entity to another point in the hierarchy.
  
  It performs validations to make sure that the parent entity can accept the child.
  
  """
  reparentEntity(
    """Parameters for ReparentEntity"""
    input: ReparentEntityInput!
  ): ReparentEntityPayload
  """
  Reset an ordering to "factory" settings. For schema-inherited orderings,
  this will reload its definition from the schema definition. For custom
  orderings, this will load minimal defaults.
  
  """
  resetOrdering(
    """Parameters for ResetOrdering"""
    input: ResetOrderingInput!
  ): ResetOrderingPayload
  """Revoke access from a specific hierarchical entity"""
  revokeAccess(
    """Parameters for RevokeAccess"""
    input: RevokeAccessInput!
  ): RevokeAccessPayload
  """Update a collection"""
  updateCollection(
    """Parameters for UpdateCollection"""
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload
  """Update a community"""
  updateCommunity(
    """Parameters for UpdateCommunity"""
    input: UpdateCommunityInput!
  ): UpdateCommunityPayload
  """
  Update a Contribution by ID.
  
  """
  updateContribution(
    """Parameters for UpdateContribution"""
    input: UpdateContributionInput!
  ): UpdateContributionPayload
  """
  Update the global configuration for this site.
  
  """
  updateGlobalConfiguration(
    """Parameters for UpdateGlobalConfiguration"""
    input: UpdateGlobalConfigurationInput!
  ): UpdateGlobalConfigurationPayload
  """Update an item"""
  updateItem(
    """Parameters for UpdateItem"""
    input: UpdateItemInput!
  ): UpdateItemPayload
  """Update an ordering by ID"""
  updateOrdering(
    """Parameters for UpdateOrdering"""
    input: UpdateOrderingInput!
  ): UpdateOrderingPayload
  """Update an organization contributor"""
  updateOrganizationContributor(
    """Parameters for UpdateOrganizationContributor"""
    input: UpdateOrganizationContributorInput!
  ): UpdateOrganizationContributorPayload
  """
  Update a page.
  
  """
  updatePage(
    """Parameters for UpdatePage"""
    input: UpdatePageInput!
  ): UpdatePagePayload
  """Update a person contributor"""
  updatePersonContributor(
    """Parameters for UpdatePersonContributor"""
    input: UpdatePersonContributorInput!
  ): UpdatePersonContributorPayload
  """
  Update the name or permissions for a given role.
  
  """
  updateRole(
    """Parameters for UpdateRole"""
    input: UpdateRoleInput!
  ): UpdateRolePayload
  """
  Update a user.
  
  """
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload
  """
  Update the current viewer (i.e. you).
  
  """
  updateViewerSettings(
    """Parameters for UpdateViewerSettings"""
    input: UpdateViewerSettingsInput!
  ): UpdateViewerSettingsPayload
  """
  Upsert a Contribution by contributable & contributor ID. It will override any
  existing contributions for the same contributor on the same entity.
  
  """
  upsertContribution(
    """Parameters for UpsertContribution"""
    input: UpsertContributionInput!
  ): UpsertContributionPayload
}

"""An error for a specific attribute in a mutation—intended for use with react-hook-form and similarly shaped structures"""
type MutationAttributeError {
  """The accumulated messages for this combination of path and type"""
  messages: [String!]!
  """The attribute that should have the error"""
  path: String!
  """A grouping type for the attribute"""
  type: String!
}

enum MutationErrorScope {
  GLOBAL
  ATTRIBUTE
}

"""An error that encapsulates the entire mutation input and is not tied to a specific input field."""
type MutationGlobalError {
  """The actual message"""
  message: String!
  type: String!
}

"""
Entity schemas can define named ancestors, which allows UI developers to refer
authoritatively to significant relatives in an entity's ancestor. This object
represents the connection between an originating entity and its ancestors,
should any be defined for the schema.

"""
type NamedAncestor {
  """The actual ancestor"""
  ancestor: AnyEntity!
  """The depth of the ancestor in the hierarchy"""
  ancestorDepth: Int!
  """The name of the ancestor. Guaranteed to be unique for this specific entity."""
  name: String!
  """The relative depth of the originating entity"""
  originDepth: Int!
  """
  The relative depth from the source entity to its ancestor. In other words, `(origin_depth - ancestor_depth)`.
  Used for sorting ancestors deterministically.
  
  """
  relativeDepth: Int!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""The priority for NULL values when sorting"""
enum NullOrderPriority {
  LAST
  FIRST
}

interface OptionableProperty {
  options: [SelectOption!]!
}

"""Ordering for a specific column"""
input OrderDefinitionInput {
  path: String!
  direction: Direction = ASCENDING
  nulls: NullOrderPriority = LAST
}

"""An ordering that belongs to an entity and arranges its children in a pre-configured way"""
type Ordering implements Node & Sluggable {
  children(
    """
    You can specify the direction to retrieve entries for an ordering.
    INVERSE will be identical to DEFAULT if the ordering is marked constant.
    
    """
    order: OrderingEntrySortMode = DEFAULT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): OrderingEntryConnection!
  createdAt: ISO8601DateTime!
  """Whether the ordering has been disabled—orderings inherited from schemas will be disabled if deleted."""
  disabled: Boolean!
  """The time the ordering was disabled, if applicable"""
  disabledAt: ISO8601Date
  """The entity that owns the ordering"""
  entity: AnyEntity!
  """Optional markdown content to render after the children"""
  footer: String
  """Optional markdown content to render before the children"""
  header: String
  id: ID!
  """A unique identifier for the ordering within the context of its parent entity."""
  identifier: String!
  """Whether the ordering was inherited from its entity's schema definition"""
  inheritedFromSchema: Boolean!
  """An optional, human-readable name for the ordering"""
  name: String
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Ordering."""
type OrderingConnection implements Paginated {
  """A list of edges."""
  edges: [OrderingEdge!]!
  """A list of nodes."""
  nodes: [Ordering!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

enum OrderingDirectSelection {
  NONE
  CHILDREN
  DESCENDANTS
}

"""An edge in a connection."""
type OrderingEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Ordering!
}

"""An entry within an ordering, it can refer to an entity or an entity link"""
type OrderingEntry implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  entry: AnyOrderingEntry!
  id: ID!
  """The parent ordering"""
  ordering: Ordering!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for OrderingEntry."""
type OrderingEntryConnection implements Paginated {
  """A list of edges."""
  edges: [OrderingEntryEdge!]!
  """A list of nodes."""
  nodes: [OrderingEntry!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrderingEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: OrderingEntry!
}

"""When fetching entries from an ordering, you can swap between the default or a special 'inverted' mode"""
enum OrderingEntrySortMode {
  """Retrieve the ordering entries as defined by default"""
  DEFAULT
  """Retrieve the ordering entries in an inverted order, accounting for paths"""
  INVERSE
}

input OrderingFilterDefinitionInput {
  schemas: [String!]
}

"""An enum used to order `Ordering`s. It uses `DETERMINISTIC` by default to ensure a consistent rendering experience."""
enum OrderingOrder {
  """Sort orderings by their static position of the ordering, falling back to the name if unset."""
  DETERMINISTIC
  """Sort orderings by newest created date"""
  RECENT
  """Sort orderings by oldest created date"""
  OLDEST
}

input OrderingSelectDefinitionInput {
  direct: OrderingDirectSelection = CHILDREN
  links: OrderingSelectLinkDefinitionInput
}

input OrderingSelectLinkDefinitionInput {
  contains: Boolean
  references: Boolean
}

"""An organization that has made contributions"""
type OrganizationContributor implements Contributor & Node & Sluggable {
  bio: String
  """The total number of collection contributions from this contributor"""
  collectionContributionCount: Int!
  collectionContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionContributionConnection!
  """The total number of contributions (item + collection) from this contributor"""
  contributionCount: Int!
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  identifier: String!
  """An optional image associated with the contributor."""
  image: ImageAttachment!
  """Configurable metadata for the image attachment"""
  imageMetadata: ImageMetadata
  """The total number of item contributions from this contributor"""
  itemContributionCount: Int!
  itemContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemContributionConnection!
  kind: ContributorKind!
  legalName: String
  links: [ContributorLink!]!
  location: String
  """A display name, independent of the type of contributor"""
  name: String!
  prefix: String
  slug: Slug!
  suffix: String
  updatedAt: ISO8601DateTime!
  url: String
}

"""A page of arbitrary content for an entity"""
type Page implements Node {
  body: String!
  createdAt: ISO8601DateTime!
  entity: AnyEntity!
  """The hero image for a page"""
  heroImage: ImageAttachment!
  """Configurable metadata for the hero_image attachment"""
  heroImageMetadata: ImageMetadata
  id: ID!
  position: Int
  slug: String!
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Page."""
type PageConnection implements Paginated {
  """A list of edges."""
  edges: [PageEdge!]!
  """A list of nodes."""
  nodes: [Page!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Determines the direction that page-number based pagination should flow"""
enum PageDirection {
  FORWARDS
  BACKWARDS
}

"""An edge in a connection."""
type PageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Page!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """The page (if page-based pagination is supported and one was provided, does not introspect a value with cursor-based pagination)"""
  page: Int
  """The total number of pages available to the connection (if page-based pagination supported and a page was provided)"""
  pageCount: Int
  """The number of edges/nodes per page (if page-based pagination supported and a page was provided)"""
  perPage: Int
  """When paginating backwards, the cursor to continue."""
  startCursor: String
  """The total number of nodes available to this connection, constrained by applied filters (if any)"""
  totalCount: Int!
  """The total number of nodes available to this connection, independent of any filters"""
  totalUnfilteredCount: Int!
}

"""Connections can be paginated by cursor or number."""
interface Paginated {
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A grant of a specific permission within a specific scope"""
type PermissionGrant {
  allowed: Boolean!
  name: String!
  scope: String
}

"""A person that has made contributions"""
type PersonContributor implements Contributor & Node & Sluggable {
  affiliation: String
  bio: String
  """The total number of collection contributions from this contributor"""
  collectionContributionCount: Int!
  collectionContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionContributionConnection!
  """The total number of contributions (item + collection) from this contributor"""
  contributionCount: Int!
  createdAt: ISO8601DateTime!
  email: String
  familyName: String
  givenName: String
  id: ID!
  identifier: String!
  """An optional image associated with the contributor."""
  image: ImageAttachment!
  """Configurable metadata for the image attachment"""
  imageMetadata: ImageMetadata
  """The total number of item contributions from this contributor"""
  itemContributionCount: Int!
  itemContributions(
    order: ContributionOrder = TARGET_TITLE_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemContributionConnection!
  kind: ContributorKind!
  links: [ContributorLink!]!
  """A display name, independent of the type of contributor"""
  name: String!
  prefix: String
  slug: Slug!
  suffix: String
  title: String
  updatedAt: ISO8601DateTime!
  url: String
}

"""When altering a schema version for an entity, there are various strategies that can be used to determine how to handle the provided properties."""
enum PropertyApplicationStrategy {
  """If set to this value, property values will be validated and applied"""
  APPLY
  """If set to this value, property values will not be applied, and the entity will likely exist in an invalid state."""
  SKIP
}

"""
The entry point for retrieving data from within the WDP API.

"""
type Query {
  """Retrieve all access grants"""
  accessGrants(
    entity: AccessGrantEntityFilter = ALL
    subject: AccessGrantSubjectFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """Look up an asset by slug"""
  asset(slug: Slug!): AnyAsset
  """Look up a collection by slug"""
  collection(slug: Slug!): Collection
  """Look up a collection contribution by slug"""
  collectionContribution(slug: Slug!): CollectionContribution
  """List all communities"""
  communities(
    order: EntityOrder = PUBLISHED_DESCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CommunityConnection!
  """Look up a community by slug"""
  community(slug: Slug!): Community
  """Look up a contributor by slug"""
  contributor(slug: Slug!): AnyContributor
  """A list of all contributors in the system"""
  contributors(
    order: ContributorOrder = NAME_ASCENDING
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyContributorConnection!
  """Fetch the global configuration for this installation"""
  globalConfiguration: GlobalConfiguration!
  """Look up an item by slug"""
  item(slug: Slug!): Item
  """Look up an item contribution by slug"""
  itemContribution(slug: Slug!): ItemContribution
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  """List all roles"""
  roles(
    order: RoleOrder = NAME_ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoleConnection!
  """Look up a schema definition by slug"""
  schemaDefinition(slug: Slug!): SchemaDefinition
  """List all schema definitions"""
  schemaDefinitions(
    order: SimpleOrder = RECENT
    namespace: String
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): SchemaDefinitionConnection!
  """Look up a schema version by slug"""
  schemaVersion(slug: Slug!): SchemaVersion
  """List all options for schema versions"""
  schemaVersionOptions(kind: SchemaKind = ITEM, namespace: String): [SchemaVersionOption!]!
  """List all schema versions"""
  schemaVersions(
    namespace: String
    order: SchemaVersionOrder = LATEST
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): SchemaVersionConnection!
  """Look up a user by slug"""
  user(slug: Slug!): User
  """A list of all users in the system"""
  users(
    order: UserOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserConnection!
  """The currently authenticated user. AKA: you"""
  viewer: User!
}

"""
An entity which can be limited in its visibility, based on some configured attributes.

"""
interface ReferencesEntityVisibility {
  """
  Whether the entity is _currently_ hidden, based on the server's time zone.
  
  """
  currentlyHidden: Boolean!
  """
  Whether the entity is _currently_ visible, based on the server's time zone.
  
  """
  currentlyVisible: Boolean!
  """
  Whether the entity's visibility is set to `HIDDEN`
  
  """
  hidden: Boolean!
  """
  Specify a time to check to see if the entity will be hidden.
  
  """
  hiddenAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  """
  Whether the entity's visibility is set to `VISIBLE`.
  
  """
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """
  Specify a time to check to see if the entity will be visible.
  
  """
  visibleAsOf(
    """
    If no value is provided, it will default to the current time.
    
    """
    time: ISO8601DateTime
  ): Boolean!
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""
An interface for retrieving certain shared, common variable-precision dates
that are associated with events in the publication, collection, and release
of an entity.

"""
interface ReferencesGlobalEntityDates {
  """The date this entity was added to its parent"""
  accessioned: VariablePrecisionDate!
  """The date this entity was made available"""
  available: VariablePrecisionDate!
  """The date this entity was issued"""
  issued: VariablePrecisionDate!
  """The date this entity was published"""
  published: VariablePrecisionDate!
}

"""Autogenerated input type of ReparentEntity"""
input ReparentEntityInput {
  """
  The collection in need of a new parent
  
  """
  childId: ID!
  """
  The ID for the new parent entity. For children of the collection type, this
  must be a community or another collection. For children of the item type,
  this must be a collection or another item.
  
  """
  parentId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReparentEntity"""
type ReparentEntityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """If the child was successfully reparented, this field will be populated"""
  child: AnyChildEntity
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of ResetOrdering"""
input ResetOrderingInput {
  orderingId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ResetOrdering"""
type ResetOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  ordering: Ordering
}

"""Autogenerated input type of RevokeAccess"""
input RevokeAccessInput {
  entityId: ID!
  roleId: ID!
  userId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RevokeAccess"""
type RevokeAccessPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """Whether or not access was revoked"""
  revoked: Boolean
}

"""A named role in the WDP API"""
type Role implements Node & Sluggable {
  """The access control list for this specific role"""
  accessControlList: AccessControlList!
  """A list of action names that have been granted to this role"""
  allowedActions: [String!]!
  createdAt: ISO8601DateTime!
  id: ID!
  """The human readable name of the role within the system"""
  name: String!
  """
  Surfaced from the accessControlList for convenience, these are returned as
  an array that allows a user to check for the state of all possible roles
  without having to specify them explicitly in the GraphQL request
  
  """
  permissions: [PermissionGrant!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Role."""
type RoleConnection implements Paginated {
  """A list of edges."""
  edges: [RoleEdge!]!
  """A list of nodes."""
  nodes: [Role!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RoleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Role!
}

"""Sort roles by a specific property and order"""
enum RoleOrder {
  """Sort roles by newest created date"""
  RECENT
  """Sort roles by oldest created date"""
  OLDEST
  """Sort roles by their name A-Z"""
  NAME_ASCENDING
  """Sort roles by their name Z-A"""
  NAME_DESCENDING
}

"""
A property on a `SchemaInstance`.

"""
interface ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""
A schema definition is a logical grouping of `SchemaVersion`s that identifies
only the shared kind, namespace, and identifier. The name is also most likely
shared, although it can change between schema versions, and the value on the
definition will default to whatever the most recent version uses.

"""
type SchemaDefinition implements DescribesSchema & Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  """A unique (per-namespace) value that names the schema within the system."""
  identifier: String!
  """The kind of entity this schema applies to"""
  kind: SchemaKind!
  """A human-readable name for the schema"""
  name: String!
  """A unique namespace the schema lives in"""
  namespace: String!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SchemaDefinition."""
type SchemaDefinitionConnection implements Paginated {
  """A list of edges."""
  edges: [SchemaDefinitionEdge!]!
  """A list of nodes."""
  nodes: [SchemaDefinition!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SchemaDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SchemaDefinition!
}

"""
Being an instance that implements a schema version with strongly-typed properties.
Overlaps with Entity, but intended for focused access to just the properties
and the necessary context.

"""
interface SchemaInstance {
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  """
  Read a single schema property by its full path.
  
  """
  schemaProperty(
    """The full path to the schema property. Please note, paths are snake_case, not camelCase."""
    fullPath: String!
  ): AnySchemaProperty
}

"""A context that describes the current state of the form"""
type SchemaInstanceContext {
  assets: [AssetSelectOption!]!
  contributors: [ContributorSelectOption!]!
  """Not yet populated. May be used in the future."""
  defaultValues: JSON!
  """The entity ID for this schema instance."""
  entityId: ID!
  """The values for the schema form on this instance"""
  fieldValues: JSON!
  """The slug for the current schema version"""
  schemaVersionSlug: String!
  """Information about the validity of the schema instance"""
  validity: SchemaInstanceValidation
}

type SchemaInstanceValidation {
  errors: [SchemaValueError!]!
  valid: Boolean!
  validatedAt: ISO8601DateTime!
}

"""The kind of entity a schema applies to"""
enum SchemaKind {
  COMMUNITY
  COLLECTION
  ITEM
}

"""
A property on a `SchemaInstance`.

"""
interface SchemaProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""Schema properties can serve various functions. This helps communicate the purpose of them, for building UIs, and general introspection."""
enum SchemaPropertyFunction {
  """
  This property acts as data inherently representative of the entity. Full text of an article, titling, and other such purposes.
  
  """
  CONTENT
  """
  This property is intended to offer further information about the content, but not necessarily the content itself.
  Most metadata should be things that are filterable or searchable to help users find and learn more about related
  content.
  
  """
  METADATA
  """
  This property is used for presenting information *about* the content, or how it should be formatted, but is less reflective
  of the content itself. An option for changing a specific render style, an additional image to display, etc.
  
  """
  PRESENTATION
  """
  This property is only used when ordering this entity by ancestors. It should not generally be visible in the frontend, but
  remain editable by admins to adjust ordering.
  
  """
  SORTING
  """
  This property's purpose remains unspecified and is likely the mark of a schema still in development. It should not generally
  be in a finished schema, as it is important to help communicate the intent of a property for those building a UI.
  
  """
  UNSPECIFIED
}

"""
The _kind_ of a data type for a schema property. Mostly informational
in the API, this value represents the underlying structure of the data type.

"""
enum SchemaPropertyKind {
  """A composite of other properties. See `GroupProperty`"""
  GROUP
  """
  A reference (or references) to other models in the system.
  
  See `AssetProperty`, `ContributorsProperty` for examples
  
  """
  REFERENCE
  """
  A complex data type that is composed of multiple subproperties
  or requires other processing. Their values cannot be easily
  mapped to GraphQL / JavaScript primitives.
  
  See `VariableDateProperty`, `FullTextProperty` for examples.
  
  """
  COMPLEX
  """
  The most common type of property, and what most values are likely to be. Strings,
  integers, floats, booleans, and so on.
  
  """
  SIMPLE
}

"""The data type for a schema property."""
enum SchemaPropertyType {
  """A reference to a single asset owned by the schema instance. See `AssetProperty`"""
  ASSET
  """A reference to multiple assets owned by the schema instance. See `AssetsProperty`"""
  ASSETS
  """True or false, yes or no, a checkbox. See `BooleanProperty`"""
  BOOLEAN
  """A reference to a single contributor in the system. See `ContributorProperty`"""
  CONTRIBUTOR
  """A reference to multiple contributors in the system. See `ContributorsProperty`"""
  CONTRIBUTORS
  """An ISO8601-formatted date. See `DateProperty`"""
  DATE
  """An email address. See `EmailProperty`"""
  EMAIL
  """A decimal / floating-point number. See `FloatProperty`"""
  FLOAT
  """A complex type representing textual content. See `FullTextProperty`"""
  FULL_TEXT
  """A type composed of other properties. See `GroupProperty`"""
  GROUP
  """A whole number. See `IntegerProperty`"""
  INTEGER
  """Markdown-formatted text. See `MarkdownProperty`"""
  MARKDOWN
  """A dropdown that supports selecting multiple values. See `MultiselectProperty`"""
  MULTISELECT
  """A dropdown that can select only one value. See `SelectProperty`"""
  SELECT
  """Simple text values. See `StringProperty`"""
  STRING
  """An array of tags that can be introspected. See `TagsProperty`"""
  TAGS
  """An ISO8601-formatted timestamp. See `TimestampProperty`"""
  TIMESTAMP
  """A fallback type for invalid schemas. See `UnknownProperty`"""
  UNKNOWN
  """A complex type representing a URL, with metadata. See `URLProperty`"""
  URL
  """A complex type representing a date that cannot be expressed exactly. See `VariableDateProperty`"""
  VARIABLE_DATE
}

"""An error that stems from trying to apply an invalid schema value."""
type SchemaValueError {
  """An error with the entire set of values"""
  base: Boolean! @deprecated(reason: "Not presently used: see globalErrors")
  """Whether this is a hint"""
  hint: Boolean!
  """A human-readable description of the error"""
  message: String!
  """Additional metadata attached to the error"""
  metadata: JSON
  """Which input value this error came from"""
  path: String!
}

"""
A specific version of a `SchemaDefinition`.

"""
type SchemaVersion implements DescribesSchema & HasSchemaProperties & Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  """A unique (per-namespace) value that names the schema within the system."""
  identifier: String!
  """The kind of entity this schema applies to"""
  kind: SchemaKind!
  """A human-readable name for the schema"""
  name: String!
  """A unique namespace the schema lives in"""
  namespace: String!
  """A semantic version for the schema"""
  number: String!
  """The shared schema definition for all versions of this namespace and identifier"""
  schemaDefinition: SchemaDefinition!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SchemaVersion."""
type SchemaVersionConnection implements Paginated {
  """A list of edges."""
  edges: [SchemaVersionEdge!]!
  """A list of nodes."""
  nodes: [SchemaVersion!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SchemaVersionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SchemaVersion!
}

type SchemaVersionOption {
  identifier: String!
  kind: SchemaKind!
  """The label to display in a select box"""
  label: String!
  name: String!
  namespace: String!
  schemaDefinition: SchemaDefinition!
  schemaVersion: SchemaVersion!
  """The value to use in a select box"""
  value: String!
}

"""Order schema versions by various factors"""
enum SchemaVersionOrder {
  """Order with newest versions at the top"""
  LATEST
  """Order with oldest versions at the top"""
  OLDEST
}

type SelectOption {
  label: String!
  value: String!
}

type SelectProperty implements SchemaProperty & ScalarProperty & OptionableProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  defaultSelection: String
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  options: [SelectOption!]!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  selection: String
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""A generic enum for sorting models that don't have anything more specific implemented"""
enum SimpleOrder {
  """Sort models by newest created date"""
  RECENT
  """Sort models by oldest created date"""
  OLDEST
}

"""Configuration settings for information about this installation."""
type SiteSettings {
  """The name of the provider supporting and maintaining this installation."""
  providerName: String!
}

"""A value for updating the site's configuration"""
input SiteSettingsInput {
  """The name of the provider supporting and maintaining this installation."""
  providerName: String!
}

"""A slug that can identify a record in context"""
scalar Slug

"""Objects have a serialized slug for looking them up in the system and generating links without UUIDs"""
interface Sluggable {
  slug: Slug!
}

"""Most mutations implement this interface in their payload in order to offer a standardize response value"""
interface StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

type StringProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  content: String
  default: String
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""When retrieving subtypes of a specific entity, you can distinguish between grabbing its children (default) or all of its descendants."""
enum SubtreeNodeFilter {
  """Fetch only the first level of the same type of entity (Item, Collection)"""
  CHILDREN
  """Fetch all descendant entities of the same base type (Item, Collection)"""
  DESCENDANTS
}

type TagsProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  tags: [String!]!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""Configuration settings for the theme of the WDP frontend."""
type ThemeSettings {
  color: String!
  font: String!
}

"""A value for updating the theme"""
input ThemeSettingsInput {
  color: String!
  font: String!
}

type TimestampProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  default: ISO8601DateTime
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  timestamp: ISO8601DateTime
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""When retrieving a paginated connection of tree-like entities, this enum is used to delineate which class of nodes to retrieve. Usually, you only want roots, but two other possibilities are exposed."""
enum TreeNodeFilter {
  """Fetch only nodes that are "roots": nodes that do not have a parent of the same type"""
  ROOTS_ONLY
  """Fetch all nodes that match other filters passed to the resolver"""
  ROOTS_AND_LEAVES
  """Fetch only nodes that are "leaves"; nodes that have a parent of the same type"""
  LEAVES_ONLY
}

"""A schematic reference to a URL, with href, label, and optional title"""
type URLProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
  url: URLReference
}

"""A representation of a URL suitable for creating anchor tags"""
type URLReference {
  """The actual URL"""
  href: String
  """A label to display within the text content of the anchor tag"""
  label: String
  """A title to display when mousing over the URL"""
  title: String
}

type UnknownProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  default: JSON
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
  unknownValue: JSON
}

"""Autogenerated input type of UpdateCollection"""
input UpdateCollectionInput {
  collectionId: ID!
  """Human-readable title for the entity"""
  title: String!
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """A brief description of the entity's contents."""
  summary: String
  """The date the entity was published"""
  published: VariablePrecisionDateInput
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """
  If set to true, this will clear the attachment hero_image on this model.
  
  """
  clearHeroImage: Boolean = false
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """Digital Object Identifier (see: https://doi.org)"""
  doi: String
  """International Standard Serial Number (see: https://issn.org)"""
  issn: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCollection"""
type UpdateCollectionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A new representation of the collection, on a successful update"""
  collection: Collection
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateCommunity"""
input UpdateCommunityInput {
  communityId: ID!
  """The position the community occupies in the list"""
  position: Int
  """Human-readable title for the entity"""
  title: String!
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """
  If set to true, this will clear the attachment hero_image on this model.
  
  """
  clearHeroImage: Boolean = false
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCommunity"""
type UpdateCommunityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A new representation of the community, on a succesful update"""
  community: Community
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateContribution"""
input UpdateContributionInput {
  contributionId: ID!
  """An arbitrary text value that describes the kind of contribution"""
  role: String
  metadata: ContributionMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateContribution"""
type UpdateContributionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  contribution: AnyContribution
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateGlobalConfiguration"""
input UpdateGlobalConfigurationInput {
  """Possible new settings for the site"""
  site: SiteSettingsInput
  """Possible new settings for the theme"""
  theme: ThemeSettingsInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateGlobalConfiguration"""
type UpdateGlobalConfigurationPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  """Though a global configuration always exists, this will be null if it fails to apply for some reason."""
  globalConfiguration: GlobalConfiguration
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateItem"""
input UpdateItemInput {
  """The item to update"""
  itemId: ID!
  """Human-readable title for the entity"""
  title: String!
  """Human-readable subtitle for the entity"""
  subtitle: String
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  thumbnailMetadata: ImageMetadataInput
  """A brief description of the entity's contents."""
  summary: String
  """The date the entity was published"""
  published: VariablePrecisionDateInput
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """
  If set to true, this will clear the attachment hero_image on this model.
  
  """
  clearHeroImage: Boolean = false
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """Digital Object Identifier (see: https://doi.org)"""
  doi: String
  """International Standard Serial Number (see: https://issn.org)"""
  issn: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateItem"""
type UpdateItemPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """A new representation of the item, on a succesful update"""
  item: Item
}

"""Autogenerated input type of UpdateOrdering"""
input UpdateOrderingInput {
  """
  The ID for the ordering to update
  
  """
  orderingId: ID!
  """A human readable label for the ordering"""
  name: String
  """Optional markdown content to display before the ordering's children"""
  header: String
  """Optional markdown content to display after the ordering's children"""
  footer: String
  filter: OrderingFilterDefinitionInput
  select: OrderingSelectDefinitionInput
  order: [OrderDefinitionInput!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateOrdering"""
type UpdateOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The updated ordering"""
  ordering: Ordering
}

"""Autogenerated input type of UpdateOrganizationContributor"""
input UpdateOrganizationContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an uploaded image in Tus.
  
  """
  image: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  imageMetadata: ImageMetadataInput
  """The legal name of the organization"""
  legalName: String
  """Where the organization is located (if applicable)"""
  location: String
  contributorId: ID!
  """
  If set to true, this will clear the attachment image on this model.
  
  """
  clearImage: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateOrganizationContributor"""
type UpdateOrganizationContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated organization"""
  contributor: OrganizationContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdatePage"""
input UpdatePageInput {
  pageId: ID!
  title: String!
  slug: String!
  position: Int
  body: String!
  """
  A reference to an uploaded image in Tus.
  
  """
  heroImage: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  heroImageMetadata: ImageMetadataInput
  """
  If set to true, this will clear the attachment hero_image on this model.
  
  """
  clearHeroImage: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePage"""
type UpdatePagePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  page: Page
}

"""Autogenerated input type of UpdatePersonContributor"""
input UpdatePersonContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an uploaded image in Tus.
  
  """
  image: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  imageMetadata: ImageMetadataInput
  givenName: String
  familyName: String
  title: String
  affiliation: String
  contributorId: ID!
  """
  If set to true, this will clear the attachment image on this model.
  
  """
  clearImage: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePersonContributor"""
type UpdatePersonContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created person"""
  contributor: PersonContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateRole"""
input UpdateRoleInput {
  roleId: ID!
  name: String!
  accessControlList: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRole"""
type UpdateRolePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  role: Role
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  userId: ID!
  """
  A reference to an uploaded image in Tus.
  
  """
  avatar: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  avatarMetadata: ImageMetadataInput
  """
  If set to true, this will clear the attachment avatar on this model.
  
  """
  clearAvatar: Boolean = false
  """
  Attributes for the user that correspond to attributes in Keycloak.
  
  """
  profile: UserProfileInput!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser"""
type UpdateUserPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  user: User
}

"""Autogenerated input type of UpdateViewerSettings"""
input UpdateViewerSettingsInput {
  """
  A reference to an uploaded image in Tus.
  
  """
  avatar: UploadedFileInput
  """
  Metadata for an image attachment.
  
  """
  avatarMetadata: ImageMetadataInput
  """
  If set to true, this will clear the attachment avatar on this model.
  
  """
  clearAvatar: Boolean = false
  """
  Attributes for the user that correspond to attributes in Keycloak.
  
  """
  profile: UserProfileInput!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateViewerSettings"""
type UpdateViewerSettingsPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  user: User
}

"""An upload ID is used to refer to an upload within the tus infrastructure outside of the GraphQL API"""
scalar UploadID

"""The name of a storage that can contain user uploads. There's only one option at present."""
enum UploadStorage {
  """
  Temporary storage. Cleaned on a regular basis if uploads are not attached anywhere.
  
  """
  CACHE
}

"""A definition for a file upload"""
input UploadedFileInput {
  id: UploadID!
  """The storage that contains the input."""
  storage: UploadStorage = CACHE
  """Metadata to associate with the upload"""
  metadata: UploadedFileMetadataInput
}

"""File metadata to attach to the upload."""
input UploadedFileMetadataInput {
  """Alt text for the upload (not always applicable)"""
  alt: String
  """The original filename, since Tus mangles them."""
  filename: String = "asset"
  """
  The original content type. WDP will detect a real content type, so this can't be spoofed, but it can be helpful with generating
  an initial asset with the correct kind.
  
  """
  mimeType: String = "application/octet-stream"
}

"""Autogenerated input type of UpsertContribution"""
input UpsertContributionInput {
  contributableId: ID!
  contributorId: ID!
  """An arbitrary text value that describes the kind of contribution"""
  role: String
  metadata: ContributionMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpsertContribution"""
type UpsertContributionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  contribution: AnyContribution
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""A known or anonymous user in the system. Registration and management is primarily handled through the WDP Keycloak instance."""
type User implements AccessGrantSubject & ExposesPermissions & Node & Sluggable {
  """All access grants for this user"""
  accessGrants(
    entity: AccessGrantEntityFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyUserAccessGrantConnection!
  """A polymorphic connection for access grants from a subject"""
  allAccessGrants(
    entity: AccessGrantEntityFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """Is this an anonymous / unauthenticated user?"""
  anonymous: Boolean!
  """A user's avatar"""
  avatar: ImageAttachment!
  """Configurable metadata for the avatar attachment"""
  avatarMetadata: ImageMetadata
  """All access grants for this user on a collection"""
  collectionAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserCollectionAccessGrantConnection!
  """Query the collections this user has access to"""
  collections(
    access: EntityPermissionFilter = READ_ONLY
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CollectionConnection!
  """Query the communities this user has access to"""
  communities(
    access: EntityPermissionFilter = READ_ONLY
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): CommunityConnection!
  """All access grants for this user on a community"""
  communityAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserCommunityAccessGrantConnection!
  createdAt: ISO8601DateTime!
  """A user's email. Depending on the upstream provider, this may not be set."""
  email: String
  """Has this user's email been verified to work through Keycloak?"""
  emailVerified: Boolean!
  """The user's family (last) name. Depending on the upstream provider, this may not be set."""
  familyName: String
  """The user's given (first) name. Depending on the upstream provider, this may not be set."""
  givenName: String
  """Does this user have access to administer the entire instance?"""
  globalAdmin: Boolean!
  id: ID!
  """All access grants for this user on an item"""
  itemAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserItemAccessGrantConnection!
  """Query the items this user has access to"""
  items(
    access: EntityPermissionFilter = READ_ONLY
    order: EntityOrder = PUBLISHED_DESCENDING
    """Filter by a namespace.name schema identifier"""
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): ItemConnection!
  """The user's full provided name. Depending on the upstream provider, this may not be set."""
  name: String
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
  """Can this user upload anything at all?"""
  uploadAccess: Boolean!
  """If a user has any upload access, this token will allow them to do so."""
  uploadToken: String
  """A unique username for the user. Depending on the upstream provider, this may not be set."""
  username: String
}

"""An access grant for a user"""
interface UserAccessGrant {
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  """The role the subject has been assigned"""
  role: Role!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  """The user which has been granted access"""
  user: User!
}

"""
An access grant for a user to a collection.

"""
type UserCollectionAccessGrant implements AccessGrant & UserAccessGrant & Node & Sluggable {
  """The collection to which a user has been granted access"""
  collection: Collection!
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The user which has been granted access"""
  user: User!
}

"""The connection type for UserCollectionAccessGrant."""
type UserCollectionAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserCollectionAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserCollectionAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserCollectionAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserCollectionAccessGrant!
}

"""
An access grant for a user to a community.

"""
type UserCommunityAccessGrant implements AccessGrant & UserAccessGrant & Node & Sluggable {
  """The community to which a user has been granted access"""
  community: Community!
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The user which has been granted access"""
  user: User!
}

"""The connection type for UserCommunityAccessGrant."""
type UserCommunityAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserCommunityAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserCommunityAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserCommunityAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserCommunityAccessGrant!
}

"""The connection type for User."""
type UserConnection implements Paginated {
  """A list of edges."""
  edges: [UserEdge!]!
  """A list of nodes."""
  nodes: [User!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: User!
}

"""A user-readable error. Somewhat deprecated now, but may be repurposed"""
type UserError {
  """The attribute path to this error, if applicable"""
  attributePath: String
  code: String
  """A description of the error"""
  message: String!
  """Which input value this error came from"""
  path: [String!]
  """Whether this error applies to a single attribute, or globally to the entire form"""
  scope: MutationErrorScope!
}

"""
Not presently exposed through the API.

"""
type UserGroup implements AccessGrantSubject & Node & Sluggable {
  """All access grants for this group"""
  accessGrants(
    entity: AccessGrantEntityFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyUserGroupAccessGrantConnection!
  """A polymorphic connection for access grants from a subject"""
  allAccessGrants(
    entity: AccessGrantEntityFilter = ALL
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): AnyAccessGrantConnection!
  """All access grants for this group on a collection"""
  collectionAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupCollectionAccessGrantConnection!
  """All access grants for this group on a community"""
  communityAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupCommunityAccessGrantConnection!
  createdAt: ISO8601DateTime!
  description: String!
  id: ID!
  """All access grants for this group on an item"""
  itemAccessGrants(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserGroupItemAccessGrantConnection!
  name: String!
  slug: Slug!
  updatedAt: ISO8601DateTime!
  users(
    order: UserOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int
  ): UserConnection!
}

"""An access grant for a user group"""
interface UserGroupAccessGrant {
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  """The role the subject has been assigned"""
  role: Role!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  """The group which has been granted access"""
  userGroup: UserGroup!
}

"""
An access grant for a group to a collection.

"""
type UserGroupCollectionAccessGrant implements AccessGrant & UserGroupAccessGrant & Node & Sluggable {
  """The collection to which a group has been granted access"""
  collection: Collection!
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The group which has been granted access"""
  userGroup: UserGroup!
}

"""The connection type for UserGroupCollectionAccessGrant."""
type UserGroupCollectionAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserGroupCollectionAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserGroupCollectionAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserGroupCollectionAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserGroupCollectionAccessGrant!
}

"""
An access grant for a group to a community.

"""
type UserGroupCommunityAccessGrant implements AccessGrant & UserGroupAccessGrant & Node & Sluggable {
  """The community to which a group has been granted access"""
  community: Community!
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The group which has been granted access"""
  userGroup: UserGroup!
}

"""The connection type for UserGroupCommunityAccessGrant."""
type UserGroupCommunityAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserGroupCommunityAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserGroupCommunityAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserGroupCommunityAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserGroupCommunityAccessGrant!
}

"""
An access grant for a group to a item.

"""
type UserGroupItemAccessGrant implements AccessGrant & UserGroupAccessGrant & Node & Sluggable {
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The item to which a group has been granted access"""
  item: Item!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The group which has been granted access"""
  userGroup: UserGroup!
}

"""The connection type for UserGroupItemAccessGrant."""
type UserGroupItemAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserGroupItemAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserGroupItemAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserGroupItemAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserGroupItemAccessGrant!
}

"""
An access grant for a user to a collection.

"""
type UserItemAccessGrant implements AccessGrant & UserAccessGrant & Node & Sluggable {
  createdAt: ISO8601DateTime!
  """The polymorphic entity to which access has been granted"""
  entity: AnyEntity!
  id: ID!
  """The item to which a user has been granted access"""
  item: Item!
  """The role the subject has been assigned"""
  role: Role!
  slug: Slug!
  """The polymorphic subject that has been granted access"""
  subject: AccessGrantSubject!
  updatedAt: ISO8601DateTime!
  """The user which has been granted access"""
  user: User!
}

"""The connection type for UserItemAccessGrant."""
type UserItemAccessGrantConnection implements Paginated {
  """A list of edges."""
  edges: [UserItemAccessGrantEdge!]!
  """A list of nodes."""
  nodes: [UserItemAccessGrant!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserItemAccessGrantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: UserItemAccessGrant!
}

"""Sort users by a specific property and order"""
enum UserOrder {
  """Sort users by newest created date"""
  RECENT
  """Sort users by oldest created date"""
  OLDEST
  """Sort users with admins pushed to the top, followed by name A-Z"""
  ADMINS_FIRST
  """Sort users with admins pushed to the top, followed by recent"""
  ADMINS_RECENT
  """Sort users by their name A-Z"""
  NAME_ASCENDING
  """Sort users by their name Z-A"""
  NAME_DESCENDING
  """Sort users by their email A-Z"""
  EMAIL_ASCENDING
  """Sort users by their email Z-A"""
  EMAIL_DESCENDING
}

"""
A mapping of attributes for a user to update in the authentication provider.

"""
input UserProfileInput {
  givenName: String!
  familyName: String!
  email: String!
  username: String!
}

type VariableDateProperty implements SchemaProperty & ScalarProperty {
  """
  Provided for introspection. This describes whether or not the property's value
  comes in an array rather than representing a discrete piece of information.
  
  See `AssetsProperty`, `ContributorsProperty`, `MultiselectProperty`, and `TagsProperty`
  for examples.
  
  """
  array: Boolean!
  dateWithPrecision: VariablePrecisionDate
  """
  A human-readable description for the property. It should describe the purpose of the
  property as well as some details about the types of values it looks for.
  
  It can be rendered as help text, hints, etc.
  
  """
  description: String
  """
  The full path that represents the property on the schema instance. It is guaranteed
  to be unique for the instance, and can be used to grab a property directly, as well as
  facilitating schema validation and errors within the admin application's forms.
  
  """
  fullPath: String!
  """
  The purpose or intent of this property relative to its entity, parents, and others.
  
  """
  function: SchemaPropertyFunction!
  """
  Whether to render a field as "wide" (two columns) in the form.
  This is intended to help structure forms logically, as well as
  provide ample space for certain types of data input, particularly
  full-text, markdown, and other such complex fields.
  
  """
  isWide: Boolean!
  """
  Provided for introspection. This describes the underlying structure of the data type.
  
  """
  kind: SchemaPropertyKind!
  """
  A human-readable label for the schema property.
  
  """
  label: String!
  """
  Provided for introspection. Whether this property can be used to order entities.
  For certain data types, there's no sensible way to order properties.
  
  """
  orderable: Boolean!
  """
  The "short" path for the property. For properties nested within a group, this can
  be considered the name of the property without the group's prefix.
  
  """
  path: String!
  """
  Whether or not this property is required in order for the schema instance
  to be considered valid.
  
  Note: invalid data provided to a schema property will still invalidate
  the instance as a whole—the required trait only determines whether a value
  **must** be set.
  
  """
  required: Boolean!
  """
  Provided for introspection. This represents the actual data type this property
  uses.
  
  Rendering in the frontend should rely primarily on the `AnySchemaProperty` and
  `AnyScalarProperty` unions (in that order)`, rather than relying on this value,
  since the actual implementations of these properties differ in the GraphQL types
  associated with their values.
  
  """
  type: SchemaPropertyType!
}

"""
A wrapper around a date that allows us to describe a level of precision to apply to it,
which can be used in the frontend to affect its display.

"""
type VariablePrecisionDate {
  """The level of precision: the frontend can make decisions about how to format the associated value based on this"""
  precision: DatePrecision!
  """The actual date, encoded in ISO8601 format (if available)"""
  value: ISO8601Date
}

"""
A corresponding input type for VariablePrecisionDate.

"""
input VariablePrecisionDateInput {
  """The actual date, encoded in ISO8601 format (if available)"""
  value: ISO8601Date
  """The level of precision: the frontend can make decisions about how to format the associated value based on this"""
  precision: DatePrecision!
}

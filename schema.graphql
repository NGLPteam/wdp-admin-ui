schema {
  query: Query
  mutation: Mutation
}

"""An access control list"""
type AccessControlList {
  permissions: [PermissionGrant!]!
}

"""Autogenerated input type of AlterSchemaVersion"""
input AlterSchemaVersionInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """The slug for the new schema to apply"""
  schemaVersionSlug: String!
  """
  An arbitrary set of property values. Owing to the dynamic nature, they do not have a specific GraphQL input type
  associated with them. Validation will be performed within the application and returned as errors if not valid.
  
  """
  propertyValues: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AlterSchemaVersion"""
type AlterSchemaVersionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  community: Community
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  item: Item
  schemaErrors: [SchemaValueError!]!
}

union AnyAsset = AssetAudio | AssetDocument | AssetImage | AssetPDF | AssetUnknown | AssetVideo

"""The connection type for AnyAsset."""
type AnyAssetConnection implements Paginated {
  """A list of edges."""
  edges: [AnyAssetEdge!]!
  """A list of nodes."""
  nodes: [AnyAsset!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyAssetEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyAsset!
}

"""Something that can be attached to"""
union AnyAttachable = Collection | Community | Item

"""A union of possible contribution types"""
union AnyContribution = CollectionContribution | ItemContribution

union AnyContributor = OrganizationContributor | PersonContributor

"""The connection type for AnyContributor."""
type AnyContributorConnection implements Paginated {
  """A list of edges."""
  edges: [AnyContributorEdge!]!
  """A list of nodes."""
  nodes: [AnyContributor!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type AnyContributorEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: AnyContributor!
}

"""A hierarchical entity type"""
union AnyEntity = Collection | Community | Item

"""The various types an OrderingEntry can refer to"""
union AnyOrderingEntry = Collection | Community | EntityLink | Item

union AnyScalarProperty = AssetProperty | AssetsProperty | BooleanProperty | ContributorProperty | ContributorsProperty | DateProperty | EmailProperty | FloatProperty | IntegerProperty | MarkdownProperty | MultiselectProperty | SelectProperty | StringProperty | TagsProperty | TimestampProperty | UnknownProperty

union AnySchemaProperty = AssetProperty | AssetsProperty | BooleanProperty | ContributorProperty | ContributorsProperty | DateProperty | EmailProperty | FloatProperty | GroupProperty | IntegerProperty | MarkdownProperty | MultiselectProperty | SelectProperty | StringProperty | TagsProperty | TimestampProperty | UnknownProperty

"""Autogenerated input type of ApplySchemaProperties"""
input ApplySchemaPropertiesInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """
  An arbitrary set of property values. Owing to the dynamic nature, they do not have a specific GraphQL input type
  associated with them. Validation will be performed within the application and returned as errors if not valid.
  
  """
  propertyValues: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ApplySchemaProperties"""
type ApplySchemaPropertiesPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  community: Community
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  item: Item
  schemaErrors: [SchemaValueError!]!
}

"""A generic asset type, implemented by all the more specific kinds"""
interface Asset {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
}

type AssetAudio implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetDocument implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetImage implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The supported kinds of assets in the system"""
enum AssetKind {
  image
  video
  audio
  pdf
  document
  unknown
}

"""The type(s) of assets to retrieve"""
enum AssetKindFilter {
  ALL
  """An image, video, or audio file"""
  MEDIA
  AUDIO
  IMAGE
  VIDEO
  PDF
  DOCUMENT
  UNKNOWN
}

type AssetPDF implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetPreview {
  alt: String!
  large: PreviewImageMap!
  medium: PreviewImageMap!
  small: PreviewImageMap!
  thumb: PreviewImageMap!
}

type AssetProperty implements ScalarProperty {
  asset: AnyAsset
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""A select option for a single asset"""
type AssetSelectOption {
  kind: AssetKind!
  label: String!
  value: String!
}

type AssetUnknown implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetVideo implements Asset & Node & Sluggable {
  attachable: AnyAttachable!
  caption: String
  contentType: String!
  createdAt: ISO8601DateTime!
  downloadUrl: String
  fileSize: Int!
  """ID of the object."""
  id: ID!
  kind: AssetKind!
  name: String!
  preview: AssetPreview
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

type AssetsProperty implements ScalarProperty {
  assets: [AnyAsset!]!
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""A model that has attached assets"""
interface Attachable {
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyAssetConnection!
}

type BooleanProperty implements ScalarProperty {
  checked: Boolean
  checkedByDefault: Boolean
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""A collection of items"""
type Collection implements Entity & HierarchicalEntry & Contributable & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyAssetConnection!
  assignedUsers(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): UserConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): CollectionConnection! @deprecated(reason: "Use Collection.collections")
  collections(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionConnection!
  community: Community!
  contributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionContributionConnection!
  """Contributors to this element"""
  contributors(
    order: SimpleOrder = RECENT
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyContributorConnection!
  createdAt: ISO8601DateTime!
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  hidden: Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  items(
    order: SimpleOrder = RECENT
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemConnection!
  leaf: Boolean!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): EntityLinkConnection!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): OrderingConnection!
  parent: CollectionParent
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  """The date the entity was published on, if present"""
  publishedOn: ISO8601Date
  root: Boolean!
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A description of the contents of the entity"""
  summary: String
  """A mapping of an entity's preview thumbnail"""
  thumbnail: AssetPreview
  """A human-readable title for the entity"""
  title: String
  updatedAt: ISO8601DateTime!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""The connection type for Collection."""
type CollectionConnection implements Paginated {
  """A list of edges."""
  edges: [CollectionEdge!]!
  """A list of nodes."""
  nodes: [Collection!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A contribution to a collection"""
type CollectionContribution implements Contribution & Node & Sluggable {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  collection: Collection!
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  createdAt: ISO8601DateTime!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  id: ID!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  slug: Slug!
  """A potentially-overridden value from person contributors"""
  title: String
  updatedAt: ISO8601DateTime!
}

"""The connection type for CollectionContribution."""
type CollectionContributionConnection implements Paginated {
  """A list of edges."""
  edges: [CollectionContributionEdge!]!
  """A list of nodes."""
  nodes: [CollectionContribution!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CollectionContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: CollectionContribution!
}

"""An edge in a connection."""
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Collection!
}

union CollectionParent = Collection | Community

"""A community of users"""
type Community implements Entity & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyAssetConnection!
  assignedUsers(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): UserConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  collections(
    order: SimpleOrder = RECENT
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionConnection!
  createdAt: ISO8601DateTime!
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): EntityLinkConnection!
  metadata: JSON
  name: String! @deprecated(reason: "Use Community.title")
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): OrderingConnection!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  position: Int
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A mapping of an entity's preview thumbnail"""
  thumbnail: AssetPreview
  title: String!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Community."""
type CommunityConnection implements Paginated {
  """A list of edges."""
  edges: [CommunityEdge!]!
  """A list of nodes."""
  nodes: [Community!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CommunityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Community!
}

"""Something that can be contributed to"""
interface Contributable {
  """Contributors to this element"""
  contributors(
    order: SimpleOrder = RECENT
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyContributorConnection!
}

"""A contribution from a certain contributor"""
interface Contribution {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  """A potentially-overridden value from person contributors"""
  title: String
}

"""Metadata for a contribution"""
type ContributionMetadata {
  """A value that can override a contribution's contributor's affiliation"""
  affiliation: String
  """A value that can oerride a contribution's contributor's displayed name"""
  displayName: String
  """An arbitrary field describing how the contributor contributed"""
  role: String
  """A value that can override a contribution's contributor's title"""
  title: String
}

"""An input type that builds contribution metadata"""
input ContributionMetadataInput {
  """A value that can override a contribution's contributor's title"""
  title: String
  """A value that can override a contribution's contributor's affiliation"""
  affiliation: String
  """A value that can override a contribution's contributor's displayed name"""
  displayName: String
  """A value that can override a contribution's contributor's location"""
  location: String
}

"""A contributor who has made a contribution"""
interface Contributor {
  bio: String
  collectionContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionContributionConnection!
  email: String
  identifier: String!
  """An optional image associated with the contributor"""
  image: AssetPreview
  itemContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemContributionConnection!
  kind: ContributorKind!
  links: [ContributorLink!]!
  prefix: String
  suffix: String
  url: String
}

enum ContributorFilterKind {
  ALL
  ORGANIZATION
  PERSON
}

enum ContributorKind {
  organization
  person
}

"""A link for a contributor"""
type ContributorLink {
  title: String!
  url: String!
}

"""A mapping to build a contributor link"""
input ContributorLinkInput {
  title: String!
  url: String!
}

type ContributorProperty implements ScalarProperty {
  contributor: AnyContributor
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""A select option for a single contributor"""
type ContributorSelectOption {
  kind: ContributorKind!
  label: String!
  value: String!
}

type ContributorsProperty implements ScalarProperty {
  contributors: [AnyContributor!]!
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""Autogenerated input type of CreateAsset"""
input CreateAssetInput {
  """The entity that owns the attachment"""
  entityId: ID!
  """
  A reference to an upload in Tus.
  
  """
  attachment: UploadedFileInput!
  """A human readable name for the asset"""
  name: String!
  """The position the asset occupies amongst siblings"""
  position: Int
  """Alt text to display for the asset (if applicable)"""
  altText: String
  """A caption to display below the asset (if applicable)"""
  caption: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateAsset"""
type CreateAssetPayload implements StandardMutationPayload {
  asset: AnyAsset
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateCollection"""
input CreateCollectionInput {
  """
  The parent of the new collection. This can be the encoded ID of a community or another collection.
  
  """
  parentId: ID!
  """Human readable title for the entity"""
  title: String!
  schemaVersionSlug: String = "default:collection:latest"
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  """A brief description of the entity's contents"""
  summary: String
  """The date the entity was published"""
  publishedOn: ISO8601Date
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCollection"""
type CreateCollectionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateCommunity"""
input CreateCommunityInput {
  """Human readable title for the entity"""
  title: String!
  """The position the community occupies in the list"""
  position: Int
  schemaVersionSlug: String = "default:community:latest"
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCommunity"""
type CreateCommunityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A representation of a successfully created community"""
  community: Community
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateItem"""
input CreateItemInput {
  """
  The parent of the item. This can be the encoded ID of a collection or another item.
  
  """
  parentId: ID!
  """Human readable title for the entity"""
  title: String!
  schemaVersionSlug: String = "default:item:latest"
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  """A brief description of the entity's contents"""
  summary: String
  """The date the entity was published"""
  publishedOn: ISO8601Date
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateItem"""
type CreateItemPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """A representation of a successfully created item"""
  item: Item
}

"""Autogenerated input type of CreateOrdering"""
input CreateOrderingInput {
  """
  The entity to create the ordering for.
  
  """
  entityId: ID!
  """A unique (within the context of the entity) identifier. Cannot be changed"""
  identifier: String!
  """A human readable label for the ordering"""
  name: String
  """Optional markdown content to display before the ordering's children"""
  header: String
  """Optional markdown content to display after the ordering's children"""
  footer: String
  filter: OrderingFilterDefinitionInput
  select: OrderingSelectDefinitionInput
  order: [OrderDefinitionInput!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrdering"""
type CreateOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The created ordering"""
  ordering: Ordering
}

"""Autogenerated input type of CreateOrganizationContributor"""
input CreateOrganizationContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an upload in Tus.
  
  """
  image: UploadedFileInput
  """The legal name of the organization"""
  legalName: String
  """Where the organization is located (if applicable)"""
  location: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrganizationContributor"""
type CreateOrganizationContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created organization"""
  contributor: OrganizationContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreatePersonContributor"""
input CreatePersonContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an upload in Tus.
  
  """
  image: UploadedFileInput
  givenName: String
  familyName: String
  title: String
  affiliation: String
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePersonContributor"""
type CreatePersonContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created person"""
  contributor: PersonContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of CreateRole"""
input CreateRoleInput {
  name: String!
  accessControlList: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRole"""
type CreateRolePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  role: Role
}

type DateProperty implements ScalarProperty {
  date: ISO8601Date
  default: ISO8601Date
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""Autogenerated input type of DestroyCollection"""
input DestroyCollectionInput {
  """The ID for the collection to destroy"""
  collectionId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyCollection"""
type DestroyCollectionPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyCommunity"""
input DestroyCommunityInput {
  """The ID for the community to destroy"""
  communityId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyCommunity"""
type DestroyCommunityPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyContribution"""
input DestroyContributionInput {
  contributionId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyContribution"""
type DestroyContributionPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyContributor"""
input DestroyContributorInput {
  contributorId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyContributor"""
type DestroyContributorPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyEntityLink"""
input DestroyEntityLinkInput {
  """The ID for the EntityLink to destroy"""
  entityLinkId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyEntityLink"""
type DestroyEntityLinkPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyItem"""
input DestroyItemInput {
  """The ID for the item to destroy"""
  itemId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyItem"""
type DestroyItemPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""This mutation destroys a model"""
interface DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of DestroyOrdering"""
input DestroyOrderingInput {
  orderingId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DestroyOrdering"""
type DestroyOrderingPayload implements StandardMutationPayload & DestroyMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """Whether or not the model was successfully destroyed. If false, check globalErrors"""
  destroyed: Boolean
  """The ID of the deleted model"""
  destroyedId: ID
  disabled: Boolean
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

enum Direction {
  ASCENDING
  DESCENDING
}

type EmailProperty implements ScalarProperty {
  address: String
  defaultAddress: String
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""An entity that exists in the hierarchy."""
interface Entity {
  """Derived access control list"""
  accessControlList: AccessControlList
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  assignedUsers(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): UserConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): EntityLinkConnection!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): OrderingConnection!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  schemaDefinition: SchemaDefinition!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  schemaVersion: SchemaVersion!
  """A mapping of an entity's preview thumbnail"""
  thumbnail: AssetPreview
}

type EntityBreadcrumb implements Node {
  crumb: AnyEntity!
  depth: Int!
  id: ID!
  kind: EntityKind!
  label: String!
  slug: String!
}

"""An enumeration of the different kinds of hierarchical entities"""
enum EntityKind {
  COMMUNITY
  COLLECTION
  ITEM
}

"""A link between different entities"""
type EntityLink implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  operator: EntityLinkOperator!
  scope: EntityLinkScope!
  slug: Slug!
  source: AnyEntity!
  sourceCollection: Collection
  sourceCommunity: Community
  sourceItem: Item
  target: AnyEntity!
  targetCollection: Collection
  targetCommunity: Community
  targetItem: Item
  updatedAt: ISO8601DateTime!
}

"""The connection type for EntityLink."""
type EntityLinkConnection implements Paginated {
  """A list of edges."""
  edges: [EntityLinkEdge!]!
  """A list of nodes."""
  nodes: [EntityLink!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EntityLinkEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: EntityLink!
}

"""A link operator describes how a source is linked to its target"""
enum EntityLinkOperator {
  CONTAINS
  REFERENCES
}

"""A link scope succinctly describes the source and target types"""
enum EntityLinkScope {
  """A link to a community from another community"""
  COMMUNITY_LINKED_COMMUNITY
  """A link to a collection not directly owned by a community"""
  COMMUNITY_LINKED_COLLECTION
  """A link to an item from a community"""
  COMMUNITY_LINKED_ITEM
  """A link to a community from a collection"""
  COLLECTION_LINKED_COMMUNITY
  """A link to a collection from another collection"""
  COLLECTION_LINKED_COLLECTION
  """A link to an item from a community"""
  COLLECTION_LINKED_ITEM
  """A link to a community from an item"""
  ITEM_LINKED_COMMUNITY
  """A link to a collection from an item"""
  ITEM_LINKED_COLLECTION
  """A link to an item from another item"""
  ITEM_LINKED_ITEM
}

enum EntityPermissionFilter {
  READ_ONLY
  CRUD
}

"""The level of visibility an entity can have"""
enum EntityVisibility {
  VISIBLE
  HIDDEN
  LIMITED
}

interface ExposesPermissions {
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
}

type FloatProperty implements ScalarProperty {
  defaultFloat: Float
  floatValue: Float
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""Autogenerated input type of GrantAccess"""
input GrantAccessInput {
  entityId: ID!
  roleId: ID!
  userId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of GrantAccess"""
type GrantAccessPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Whether or not access was granted"""
  granted: Boolean
  """Not presently used"""
  haltCode: String
}

type GroupProperty implements SchemaProperty {
  fullPath: String!
  legend: String
  path: String!
  properties: [AnyScalarProperty!]!
  required: Boolean!
  type: String!
}

interface HasSchemaProperties {
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
}

"""A hierarchical entity, like a collection or an item."""
interface HierarchicalEntry {
  createdAt: ISO8601DateTime!
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  hidden: Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  leaf: Boolean!
  """The date the entity was published on, if present"""
  publishedOn: ISO8601Date
  root: Boolean!
  """A description of the contents of the entity"""
  summary: String
  """A human-readable title for the entity"""
  title: String
  updatedAt: ISO8601DateTime!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type IntegerProperty implements ScalarProperty {
  defaultInteger: Int
  fullPath: String!
  integerValue: Int
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

"""An item that belongs to a collection"""
type Item implements Entity & HierarchicalEntry & Contributable & HasSchemaProperties & Attachable & SchemaInstance & Node & Sluggable {
  """Derived access control list"""
  accessControlList: AccessControlList
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """The role(s) that gave the permissions to access this resource, if any."""
  applicableRoles: [Role!]
  """Assets owned by this entity"""
  assets(
    order: SimpleOrder = RECENT
    kind: AssetKindFilter = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyAssetConnection!
  assignedUsers(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): UserConnection!
  """Previous entries in the hierarchy"""
  breadcrumbs: [EntityBreadcrumb!]!
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): ItemConnection! @deprecated(reason: "Use Item.items")
  collection: Collection!
  community: Community!
  contributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemContributionConnection!
  """Contributors to this element"""
  contributors(
    order: SimpleOrder = RECENT
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyContributorConnection!
  createdAt: ISO8601DateTime!
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  hidden: Boolean!
  """If present, this is the timestamp the entity was hidden at"""
  hiddenAt: ISO8601DateTime
  """The depth of the hierarchical entity, taking into account any parent types"""
  hierarchicalDepth: Int!
  id: ID!
  """A machine-readable identifier for the entity. Not presently used, but will be necessary for synchronizing with upstream providers."""
  identifier: String!
  items(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemConnection!
  leaf: Boolean!
  links(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): EntityLinkConnection!
  """Look up an ordering for this entity by identifier"""
  ordering(identifier: String!): Ordering
  orderings(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): OrderingConnection!
  parent: ItemParent
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  """The date the entity was published on, if present"""
  publishedOn: ISO8601Date
  root: Boolean!
  schemaDefinition: SchemaDefinition!
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  schemaVersion: SchemaVersion!
  slug: Slug!
  """A description of the contents of the entity"""
  summary: String
  """A mapping of an entity's preview thumbnail"""
  thumbnail: AssetPreview
  """A human-readable title for the entity"""
  title: String
  updatedAt: ISO8601DateTime!
  """If an entity is available in the frontend"""
  visibility: EntityVisibility!
  visible: Boolean!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
}

"""The connection type for Item."""
type ItemConnection implements Paginated {
  """A list of edges."""
  edges: [ItemEdge!]!
  """A list of nodes."""
  nodes: [Item!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A contribution to an item"""
type ItemContribution implements Contribution & Node & Sluggable {
  """A potentially-overridden value from person contributors"""
  affiliation: String
  contributor: AnyContributor!
  contributorKind: ContributorKind!
  createdAt: ISO8601DateTime!
  """A potentially-overridden display name value for all contributor types"""
  displayName: String!
  id: ID!
  item: Item!
  """A potentially-overridden value from organization contributors"""
  location: String
  metadata: ContributionMetadata!
  """An arbitrary text value describing the role the contributor had"""
  role: String
  slug: Slug!
  """A potentially-overridden value from person contributors"""
  title: String
  updatedAt: ISO8601DateTime!
}

"""The connection type for ItemContribution."""
type ItemContributionConnection implements Paginated {
  """A list of edges."""
  edges: [ItemContributionEdge!]!
  """A list of nodes."""
  nodes: [ItemContribution!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ItemContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: ItemContribution!
}

"""An edge in a connection."""
type ItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Item!
}

union ItemParent = Collection | Item

"""Represents untyped JSON"""
scalar JSON

"""Autogenerated input type of LinkEntity"""
input LinkEntityInput {
  """The ID for the source entity"""
  sourceId: ID!
  """The ID for the target entity"""
  targetId: ID!
  """The 'type' of link"""
  operator: EntityLinkOperator!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LinkEntity"""
type LinkEntityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The created or updated link, if applicable"""
  link: EntityLink
}

type MarkdownProperty implements ScalarProperty {
  content: String
  default: String
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

type MultiselectProperty implements ScalarProperty & OptionableProperty {
  defaultSelections: [String!]
  fullPath: String!
  label: String!
  options: [SelectOption!]!
  path: String!
  required: Boolean!
  selections: [String!]
  type: String!
}

"""
The entry point for making changes to the data within the WDP API.

"""
type Mutation {
  """Change a schema version for an entity."""
  alterSchemaVersion(
    """Parameters for AlterSchemaVersion"""
    input: AlterSchemaVersionInput!
  ): AlterSchemaVersionPayload
  applySchemaProperties(
    """Parameters for ApplySchemaProperties"""
    input: ApplySchemaPropertiesInput!
  ): ApplySchemaPropertiesPayload
  """
  Associate an uploaded asset (already present in the Tus cache store) with an entity.
  
  """
  createAsset(
    """Parameters for CreateAsset"""
    input: CreateAssetInput!
  ): CreateAssetPayload
  createCollection(
    """Parameters for CreateCollection"""
    input: CreateCollectionInput!
  ): CreateCollectionPayload
  """Create a community"""
  createCommunity(
    """Parameters for CreateCommunity"""
    input: CreateCommunityInput!
  ): CreateCommunityPayload
  """Create an item"""
  createItem(
    """Parameters for CreateItem"""
    input: CreateItemInput!
  ): CreateItemPayload
  """Create an ordering for an entity"""
  createOrdering(
    """Parameters for CreateOrdering"""
    input: CreateOrderingInput!
  ): CreateOrderingPayload
  """Create an organization contributor"""
  createOrganizationContributor(
    """Parameters for CreateOrganizationContributor"""
    input: CreateOrganizationContributorInput!
  ): CreateOrganizationContributorPayload
  """Create a contributor"""
  createPersonContributor(
    """Parameters for CreatePersonContributor"""
    input: CreatePersonContributorInput!
  ): CreatePersonContributorPayload
  """
  Create a global role, with a set of permissions, that can be used to grant access to various parts of the hierarchy
  in a granular fashion.
  
  """
  createRole(
    """Parameters for CreateRole"""
    input: CreateRoleInput!
  ): CreateRolePayload
  """
  Destroy a collection by ID.
  
  """
  destroyCollection(
    """Parameters for DestroyCollection"""
    input: DestroyCollectionInput!
  ): DestroyCollectionPayload
  """
  Destroy a community by ID.
  
  """
  destroyCommunity(
    """Parameters for DestroyCommunity"""
    input: DestroyCommunityInput!
  ): DestroyCommunityPayload
  """
  Destroy a Contribution by ID.
  
  """
  destroyContribution(
    """Parameters for DestroyContribution"""
    input: DestroyContributionInput!
  ): DestroyContributionPayload
  """
  Destroy a contributor by ID.
  
  """
  destroyContributor(
    """Parameters for DestroyContributor"""
    input: DestroyContributorInput!
  ): DestroyContributorPayload
  """
  Destroy an EntityLink by ID.
  
  """
  destroyEntityLink(
    """Parameters for DestroyEntityLink"""
    input: DestroyEntityLinkInput!
  ): DestroyEntityLinkPayload
  """
  Destroy an item by ID.
  
  """
  destroyItem(
    """Parameters for DestroyItem"""
    input: DestroyItemInput!
  ): DestroyItemPayload
  """
  Destroy (or disable a schema-inherited) ordering.
  
  """
  destroyOrdering(
    """Parameters for DestroyOrdering"""
    input: DestroyOrderingInput!
  ): DestroyOrderingPayload
  """Grant access to a specific hierarchical entity"""
  grantAccess(
    """Parameters for GrantAccess"""
    input: GrantAccessInput!
  ): GrantAccessPayload
  """Link two entities together"""
  linkEntity(
    """Parameters for LinkEntity"""
    input: LinkEntityInput!
  ): LinkEntityPayload
  """
  Reassign the collection to another point in the hierarchy.
  
  This will update all child collections and descended items, if need be.
  
  """
  reparentCollection(
    """Parameters for ReparentCollection"""
    input: ReparentCollectionInput!
  ): ReparentCollectionPayload
  """
  Reassign the item to another point in the hierarchy.
  
  This will also update any descendant items, if need be.
  
  """
  reparentItem(
    """Parameters for ReparentItem"""
    input: ReparentItemInput!
  ): ReparentItemPayload
  """
  Reset an ordering to "factory" settings. For schema-inherited orderings,
  this will reload its definition from the schema definition. For custom
  orderings, this will load minimal defaults.
  
  """
  resetOrdering(
    """Parameters for ResetOrdering"""
    input: ResetOrderingInput!
  ): ResetOrderingPayload
  """Revoke access from a specific hierarchical entity"""
  revokeAccess(
    """Parameters for RevokeAccess"""
    input: RevokeAccessInput!
  ): RevokeAccessPayload
  """Update a collection"""
  updateCollection(
    """Parameters for UpdateCollection"""
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload
  """Update a community"""
  updateCommunity(
    """Parameters for UpdateCommunity"""
    input: UpdateCommunityInput!
  ): UpdateCommunityPayload
  """
  Update a Contribution by ID.
  
  """
  updateContribution(
    """Parameters for UpdateContribution"""
    input: UpdateContributionInput!
  ): UpdateContributionPayload
  """Update an item"""
  updateItem(
    """Parameters for UpdateItem"""
    input: UpdateItemInput!
  ): UpdateItemPayload
  """Update an ordering by ID"""
  updateOrdering(
    """Parameters for UpdateOrdering"""
    input: UpdateOrderingInput!
  ): UpdateOrderingPayload
  """Update an organization contributor"""
  updateOrganizationContributor(
    """Parameters for UpdateOrganizationContributor"""
    input: UpdateOrganizationContributorInput!
  ): UpdateOrganizationContributorPayload
  """Update a person contributor"""
  updatePersonContributor(
    """Parameters for UpdatePersonContributor"""
    input: UpdatePersonContributorInput!
  ): UpdatePersonContributorPayload
  """
  Update the name or permissions for a given role.
  
  """
  updateRole(
    """Parameters for UpdateRole"""
    input: UpdateRoleInput!
  ): UpdateRolePayload
  """
  Upsert a Contribution by contributable & contributor ID. It will override any
  existing contributions for the same contributor on the same entity.
  
  """
  upsertContribution(
    """Parameters for UpsertContribution"""
    input: UpsertContributionInput!
  ): UpsertContributionPayload
}

"""An error for a specific attribute in a mutation—intended for use with react-hook-form and similarly shaped structures"""
type MutationAttributeError {
  """The accumulated messages for this combination of path and type"""
  messages: [String!]!
  """The attribute that should have the error"""
  path: String!
  """A grouping type for the attribute"""
  type: String!
}

enum MutationErrorScope {
  GLOBAL
  ATTRIBUTE
}

"""An error that encapsulates the entire mutation input and is not tied to a specific input field."""
type MutationGlobalError {
  """The actual message"""
  message: String!
  type: String!
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""The priority for NULL values when sorting"""
enum NullOrderPriority {
  LAST
  FIRST
}

interface OptionableProperty {
  options: [SelectOption!]!
}

"""Ordering for a specific column"""
input OrderDefinitionInput {
  path: String!
  direction: Direction = ASCENDING
  nulls: NullOrderPriority = LAST
}

"""An ordering that belongs to an entity and arranges its children in a pre-configured way"""
type Ordering implements Node & Sluggable {
  children(
    order: PositionDirection = ASCENDING
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): OrderingEntryConnection!
  createdAt: ISO8601DateTime!
  """Whether the ordering has been disabled—orderings inherited from schemas will be disabled if deleted."""
  disabled: Boolean!
  """The time the ordering was disabled, if applicable"""
  disabledAt: ISO8601Date
  """The entity that owns the ordering"""
  entity: AnyEntity!
  """Optional markdown content to render after the children"""
  footer: String
  """Optional markdown content to render before the children"""
  header: String
  id: ID!
  """A unique identifier for the ordering within the context of its parent entity."""
  identifier: String!
  """Whether the ordering was inherited from its entity's schema definition"""
  inheritedFromSchema: Boolean!
  """An optional, human-readable name for the ordering"""
  name: String
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Ordering."""
type OrderingConnection implements Paginated {
  """A list of edges."""
  edges: [OrderingEdge!]!
  """A list of nodes."""
  nodes: [Ordering!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

enum OrderingDirectSelection {
  NONE
  CHILDREN
  DESCENDANTS
}

"""An edge in a connection."""
type OrderingEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Ordering!
}

"""An entry within an ordering, it can refer to an entity or an entity link"""
type OrderingEntry implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  entry: AnyOrderingEntry!
  id: ID!
  """The parent ordering"""
  ordering: Ordering!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for OrderingEntry."""
type OrderingEntryConnection implements Paginated {
  """A list of edges."""
  edges: [OrderingEntryEdge!]!
  """A list of nodes."""
  nodes: [OrderingEntry!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrderingEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: OrderingEntry!
}

input OrderingFilterDefinitionInput {
  schemas: [String!]
}

input OrderingSelectDefinitionInput {
  direct: OrderingDirectSelection = CHILDREN
  links: OrderingSelectLinkDefinitionInput
}

input OrderingSelectLinkDefinitionInput {
  contains: Boolean
  references: Boolean
}

"""An organization that has made contributions"""
type OrganizationContributor implements Contributor & Node & Sluggable {
  bio: String
  collectionContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionContributionConnection!
  createdAt: ISO8601DateTime!
  email: String
  id: ID!
  identifier: String!
  """An optional image associated with the contributor"""
  image: AssetPreview
  itemContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemContributionConnection!
  kind: ContributorKind!
  legalName: String
  links: [ContributorLink!]!
  location: String
  prefix: String
  slug: Slug!
  suffix: String
  updatedAt: ISO8601DateTime!
  url: String
}

"""Determines the direction that page-number based pagination should flow"""
enum PageDirection {
  FORWARDS
  BACKWARDS
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """The page (if page-based pagination is supported and one was provided, does not introspect a value with cursor-based pagination)"""
  page: Int
  """The total number of pages available to the connection (if page-based pagination supported and a page was provided)"""
  pageCount: Int
  """The number of edges/nodes per page (if page-based pagination supported and a page was provided)"""
  perPage: Int
  """When paginating backwards, the cursor to continue."""
  startCursor: String
  """The total number of nodes available to this connection, constrained by applied filters (if any)"""
  totalCount: Int!
  """The total number of nodes available to this connection, independent of any filters"""
  totalUnfilteredCount: Int!
}

"""Connections can be paginated by cursor or number."""
interface Paginated {
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""A grant of a specific permission within a specific scope"""
type PermissionGrant {
  allowed: Boolean!
  name: String!
  scope: String
}

"""A person that has made contributions"""
type PersonContributor implements Contributor & Node & Sluggable {
  affiliation: String
  bio: String
  collectionContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionContributionConnection!
  createdAt: ISO8601DateTime!
  email: String
  familyName: String
  givenName: String
  id: ID!
  identifier: String!
  """An optional image associated with the contributor"""
  image: AssetPreview
  itemContributions(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemContributionConnection!
  kind: ContributorKind!
  links: [ContributorLink!]!
  prefix: String
  slug: Slug!
  suffix: String
  title: String
  updatedAt: ISO8601DateTime!
  url: String
}

"""An enum that describes sorting nodes by position in ascending or descending order."""
enum PositionDirection {
  ASCENDING
  DESCENDING
}

type PreviewImage {
  alt: String!
  dimensions: [Int!]!
  height: Int!
  url: String!
  width: Int!
}

type PreviewImageMap {
  alt: String!
  dimensions: [Int!]!
  height: Int!
  png: PreviewImage
  webp: PreviewImage
  width: Int!
}

"""
The entry point for retrieving data from within the WDP API.

"""
type Query {
  """Look up a collection by slug"""
  collection(slug: Slug!): Collection
  """Look up a collection contribution by slug"""
  collectionContribution(slug: Slug!): CollectionContribution
  """List all communities"""
  communities(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CommunityConnection!
  """Look up a community by slug"""
  community(slug: Slug!): Community
  """Look up a contributor by slug"""
  contributor(slug: Slug!): AnyContributor
  """A list of all contributors in the system"""
  contributors(
    order: SimpleOrder = RECENT
    kind: ContributorFilterKind = ALL
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): AnyContributorConnection!
  """Look up an item by slug"""
  item(slug: Slug!): Item
  """Look up an item contribution by slug"""
  itemContribution(slug: Slug!): ItemContribution
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  """List all roles"""
  roles(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): RoleConnection!
  """Look up a schema definition by slug"""
  schemaDefinition(slug: Slug!): SchemaDefinition
  """List all schema definitions"""
  schemaDefinitions(
    order: SimpleOrder = RECENT
    namespace: String
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): SchemaDefinitionConnection!
  """Look up a schema version by slug"""
  schemaVersion(slug: Slug!): SchemaVersion
  """List all schema versions"""
  schemaVersions(
    namespace: String
    order: SchemaVersionOrder = LATEST
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): SchemaVersionConnection!
  """Look up a user by slug"""
  user(slug: Slug!): User
  """A list of all users in the system"""
  users(
    order: SimpleOrder = RECENT
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): UserConnection!
  """The currently authenticated user. AKA: you"""
  viewer: User!
}

"""Autogenerated input type of ReparentCollection"""
input ReparentCollectionInput {
  """
  The collection in need of a new parent
  
  """
  collectionId: ID!
  """
  The id for the collection's new parent. This can be a community or another collection.
  
  """
  parentId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReparentCollection"""
type ReparentCollectionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  collection: Collection
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of ReparentItem"""
input ReparentItemInput {
  """
  The collection in need of a new parent
  
  """
  itemId: ID!
  """
  The id for the item's new parent. This can be a collection or another item.
  
  """
  parentId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReparentItem"""
type ReparentItemPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  item: Item
}

"""Autogenerated input type of ResetOrdering"""
input ResetOrderingInput {
  orderingId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ResetOrdering"""
type ResetOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  ordering: Ordering
}

"""Autogenerated input type of RevokeAccess"""
input RevokeAccessInput {
  entityId: ID!
  roleId: ID!
  userId: ID!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RevokeAccess"""
type RevokeAccessPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  entity: AnyEntity
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """Whether or not access was revoked"""
  revoked: Boolean
}

"""A named role in the WDP API"""
type Role implements Node & Sluggable {
  """The access control list for this specific role"""
  accessControlList: AccessControlList!
  """A list of action names that have been granted to this role"""
  allowedActions: [String!]!
  createdAt: ISO8601DateTime!
  id: ID!
  """The human readable name of the role within the system"""
  name: String!
  """
  Surfaced from the accessControlList for convenience, these are returned as
  an array that allows a user to check for the state of all possible roles
  without having to specify them explicitly in the GraphQL request
  
  """
  permissions: [PermissionGrant!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Role."""
type RoleConnection implements Paginated {
  """A list of edges."""
  edges: [RoleEdge!]!
  """A list of nodes."""
  nodes: [Role!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RoleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Role!
}

interface ScalarProperty {
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

type SchemaDefinition implements Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  identifier: String!
  kind: SchemaKind!
  name: String!
  namespace: String!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SchemaDefinition."""
type SchemaDefinitionConnection implements Paginated {
  """A list of edges."""
  edges: [SchemaDefinitionEdge!]!
  """A list of nodes."""
  nodes: [SchemaDefinition!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SchemaDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SchemaDefinition!
}

"""
Being an instance that implements a schema version with strongly-typed properties.
Overlaps with Entity, but intended for focused access to just the properties
and the necessary context.

"""
interface SchemaInstance {
  """The context for our schema instance. Includes form values and necessary referents."""
  schemaInstanceContext: SchemaInstanceContext!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
}

"""A context that describes the current state of the form"""
type SchemaInstanceContext {
  assets: [AssetSelectOption!]!
  contributors: [ContributorSelectOption!]!
  """Not yet populated. May be used in the future."""
  defaultValues: JSON!
  """The entity ID for this schema instance."""
  entityId: ID!
  """The values for the schema form on this instance"""
  fieldValues: JSON!
  """The slug for the current schema version"""
  schemaVersionSlug: String!
}

enum SchemaKind {
  COMMUNITY
  COLLECTION
  ITEM
  """Presently unused"""
  METADATA
}

interface SchemaProperty {
  fullPath: String!
  path: String!
  type: String!
}

"""An error that stems from trying to apply an invalid schema value."""
type SchemaValueError {
  """An error with the entire set of values"""
  base: Boolean! @deprecated(reason: "Not presently used: see globalErrors")
  """Whether this is a hint"""
  hint: Boolean!
  """A human-readable description of the error"""
  message: String!
  """Additional metadata attached to the error"""
  metadata: JSON
  """Which input value this error came from"""
  path: String!
}

"""A specific version of a schema definition"""
type SchemaVersion implements HasSchemaProperties & Node & Sluggable {
  createdAt: ISO8601DateTime!
  id: ID!
  identifier: String!
  kind: SchemaKind!
  name: String!
  namespace: String!
  number: String!
  schemaDefinition: SchemaDefinition!
  """A list of schema properties associated with this instance or version."""
  schemaProperties: [AnySchemaProperty!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
}

"""The connection type for SchemaVersion."""
type SchemaVersionConnection implements Paginated {
  """A list of edges."""
  edges: [SchemaVersionEdge!]!
  """A list of nodes."""
  nodes: [SchemaVersion!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SchemaVersionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: SchemaVersion!
}

"""Order schema versions by various factors"""
enum SchemaVersionOrder {
  """Order with newest versions at the top"""
  LATEST
  """Order with oldest versions at the top"""
  OLDEST
}

type SelectOption {
  label: String!
  value: String!
}

type SelectProperty implements ScalarProperty & OptionableProperty {
  defaultSelection: String
  fullPath: String!
  label: String!
  options: [SelectOption!]!
  path: String!
  required: Boolean!
  selection: String
  type: String!
}

enum SimpleOrder {
  RECENT
  OLDEST
}

"""A slug that can identify a record in context"""
scalar Slug

"""Objects have a serialized slug for looking them up in the system and generating links without UUIDs"""
interface Sluggable {
  slug: Slug!
}

"""Most mutations implement this interface in their payload in order to offer a standardize response value"""
interface StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

type StringProperty implements ScalarProperty {
  content: String
  default: String
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
}

type TagsProperty implements ScalarProperty {
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  tags: [String!]!
  type: String!
}

type TimestampProperty implements ScalarProperty {
  default: ISO8601DateTime
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  timestamp: ISO8601DateTime
  type: String!
}

"""When retrieving a paginated connection of tree-like entities, this enum is used to delineate which class of nodes to retrieve. Usually, you only want roots, but two other possibilities are exposed."""
enum TreeNodeFilter {
  """Fetch only nodes that are "roots": nodes that do not have a parent of the same type"""
  ROOTS_ONLY
  """Fetch all nodes that match other filters passed to the resolver"""
  ROOTS_AND_LEAVES
  """Fetch only nodes that are "leaves"; nodes that have a parent of the same type"""
  LEAVES_ONLY
}

type UnknownProperty implements ScalarProperty {
  default: JSON
  fullPath: String!
  label: String!
  path: String!
  required: Boolean!
  type: String!
  unknownValue: JSON
}

"""Autogenerated input type of UpdateCollection"""
input UpdateCollectionInput {
  collectionId: ID!
  """Human readable title for the entity"""
  title: String!
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  """A brief description of the entity's contents"""
  summary: String
  """The date the entity was published"""
  publishedOn: ISO8601Date
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCollection"""
type UpdateCollectionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A new representation of the collection, on a successful update"""
  collection: Collection
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateCommunity"""
input UpdateCommunityInput {
  communityId: ID!
  """The position the community occupies in the list"""
  position: Int
  """Human readable title for the entity"""
  title: String!
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCommunity"""
type UpdateCommunityPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """A new representation of the community, on a succesful update"""
  community: Community
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateContribution"""
input UpdateContributionInput {
  contributionId: ID!
  """An arbitrary text value that describes the kind of contribution"""
  role: String
  metadata: ContributionMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateContribution"""
type UpdateContributionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  contribution: AnyContribution
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateItem"""
input UpdateItemInput {
  """The item to update"""
  itemId: ID!
  """Human readable title for the entity"""
  title: String!
  """
  A reference to an uploaded image in Tus.
  
  """
  thumbnail: UploadedFileInput
  """The Digital Object Identifier for this entity. See https://doi.org"""
  doi: String
  """A brief description of the entity's contents"""
  summary: String
  """The date the entity was published"""
  publishedOn: ISO8601Date
  """What level of visibility the entity has"""
  visibility: EntityVisibility!
  """If present, this is the timestamp an entity is visible after"""
  visibleAfterAt: ISO8601DateTime
  """If present, this is the timestamp an entity is visible until"""
  visibleUntilAt: ISO8601DateTime
  """
  If set to true, this will clear the attachment thumbnail on this model.
  
  """
  clearThumbnail: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateItem"""
type UpdateItemPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """A new representation of the item, on a succesful update"""
  item: Item
}

"""Autogenerated input type of UpdateOrdering"""
input UpdateOrderingInput {
  """
  The ID for the ordering to update
  
  """
  orderingId: ID!
  """A human readable label for the ordering"""
  name: String
  """Optional markdown content to display before the ordering's children"""
  header: String
  """Optional markdown content to display after the ordering's children"""
  footer: String
  filter: OrderingFilterDefinitionInput
  select: OrderingSelectDefinitionInput
  order: [OrderDefinitionInput!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateOrdering"""
type UpdateOrderingPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  """The updated ordering"""
  ordering: Ordering
}

"""Autogenerated input type of UpdateOrganizationContributor"""
input UpdateOrganizationContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an upload in Tus.
  
  """
  image: UploadedFileInput
  """The legal name of the organization"""
  legalName: String
  """Where the organization is located (if applicable)"""
  location: String
  contributorId: ID!
  """
  If set to true, this will clear the attachment image on this model.
  
  """
  clearImage: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateOrganizationContributor"""
type UpdateOrganizationContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The updated organization"""
  contributor: OrganizationContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdatePersonContributor"""
input UpdatePersonContributorInput {
  """An email associated with the contributor"""
  email: String
  """A url associated with the contributor"""
  url: String
  """A summary of the contributor"""
  bio: String
  links: [ContributorLinkInput!]
  """
  A reference to an upload in Tus.
  
  """
  image: UploadedFileInput
  givenName: String
  familyName: String
  title: String
  affiliation: String
  contributorId: ID!
  """
  If set to true, this will clear the attachment image on this model.
  
  """
  clearImage: Boolean = false
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePersonContributor"""
type UpdatePersonContributorPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """The created person"""
  contributor: PersonContributor
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""Autogenerated input type of UpdateRole"""
input UpdateRoleInput {
  roleId: ID!
  name: String!
  accessControlList: JSON!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRole"""
type UpdateRolePayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
  role: Role
}

"""An upload ID is used to refer to an upload within the tus infrastructure outside of the GraphQL API"""
scalar UploadID

"""The name of a storage that can contain user uploads. There's only one option at present."""
enum UploadStorage {
  """
  Temporary storage. Cleaned on a regular basis if uploads are not attached anywhere.
  
  """
  CACHE
}

"""A definition for a file upload"""
input UploadedFileInput {
  id: UploadID!
  """The storage that contains the input."""
  storage: UploadStorage = CACHE
  metadata: UploadedFileMetadataInput
}

"""File metadata to attach to the upload."""
input UploadedFileMetadataInput {
  """The original filename, since Tus mangles them."""
  filename: String = "asset"
  """
  The original content type. WDP will detect a real content type, so this can't be spoofed, but it can be helpful with generating
  an initial asset with the correct kind.
  
  """
  mimeType: String = "application/octet-stream"
}

"""Autogenerated input type of UpsertContribution"""
input UpsertContributionInput {
  contributableId: ID!
  contributorId: ID!
  """An arbitrary text value that describes the kind of contribution"""
  role: String
  metadata: ContributionMetadataInput
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpsertContribution"""
type UpsertContributionPayload implements StandardMutationPayload {
  attributeErrors: [MutationAttributeError!]!
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  contribution: AnyContribution
  errors: [UserError!]!
  globalErrors: [MutationGlobalError!]!
  """Not presently used"""
  haltCode: String
}

"""A known or anonymous user in the system. Registration and management is primarily handled through the WDP Keycloak instance."""
type User implements ExposesPermissions & Node & Sluggable {
  """A list of allowed actions for the given user on this entity (and its descendants)."""
  allowedActions: [String!]!
  """Is this an anonymous / unauthenticated user?"""
  anonymous: Boolean!
  """Query the collections this user has access to"""
  collections(
    access: EntityPermissionFilter = READ_ONLY
    order: SimpleOrder = RECENT
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CollectionConnection!
  """Query the communities this user has access to"""
  communities(
    access: EntityPermissionFilter = READ_ONLY
    order: SimpleOrder = RECENT
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): CommunityConnection!
  createdAt: ISO8601DateTime!
  """A user's email. Depending on the upstream provider, this may not be set."""
  email: String
  """Has this user's email been verified to work through Keycloak?"""
  emailVerified: Boolean!
  """Does this user have access to administer the entire instance?"""
  globalAdmin: Boolean!
  id: ID!
  """Query the items this user has access to"""
  items(
    access: EntityPermissionFilter = READ_ONLY
    order: SimpleOrder = RECENT
    schema: [String!]
    """Select the classification of nodes to retrieve: see TreeNodeFilter for a more thorough explanation"""
    nodeFilter: TreeNodeFilter = ROOTS_ONLY
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """Returns the elements in the list that come before the specified cursor."""
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """The page of edges/nodes to fetch"""
    page: Int
    """The direction in which pages advance (to traverse pages backwards)"""
    pageDirection: PageDirection! = FORWARDS
    """The amount of edges / nodes to fetch per page"""
    perPage: Int! = 25
  ): ItemConnection!
  """The user's full provided name. Depending on the upstream provider, this may not be set."""
  name: String
  """An array of hashes that can be requested to load in a context"""
  permissions: [PermissionGrant!]!
  slug: Slug!
  updatedAt: ISO8601DateTime!
  """Can this user upload anything at all?"""
  uploadAccess: Boolean!
  """If a user has any upload access, this token will allow them to do so."""
  uploadToken: String
  """A unique username for the user. Depending on the upstream provider, this may not be set."""
  username: String
}

"""The connection type for User."""
type UserConnection implements Paginated {
  """A list of edges."""
  edges: [UserEdge!]!
  """A list of nodes."""
  nodes: [User!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: User!
}

"""A user-readable error. Somewhat deprecated now, but may be repurposed"""
type UserError {
  """The attribute path to this error, if applicable"""
  attributePath: String
  code: String
  """A description of the error"""
  message: String!
  """Which input value this error came from"""
  path: [String!]
  """Whether this error applies to a single attribute, or globally to the entire form"""
  scope: MutationErrorScope!
}
